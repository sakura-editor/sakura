;バッチファイルのキーワードヘルプ定義
% /// 変数を表します\n\n%n   バッチファイルに渡された引数\n     第一引数: %1\n     第二引数: %2\n     第ｎ引数: %n\n\n関連項目:SHIFT\n\n特殊な環境変数\n\n%CONFIG%    config.sysでmenuitemで指定された値\n%PROMPT%    プロンプトの表示形式\n%COMSPEC%   Command.comの場所\n%PATH%      環境変数PATH\n%CMDLINE%   最後に実行されたコマンドを格納\n\n関連項目:SET
>,>>,<,| /// 標準出力をリダイレクトまたはパイプします。\n\nコマンド > TEST.TXT     TEST.TXTに出力\nコマンド >> TEST.TXT    TEST.TXTに追加保存\nECHO Y | DEL *.*        DELコマンドにYキーを渡して実行\nDIR | MORE              一画面ずつ表示
ADDDRV /// キャラクタ型デバイスドライバーを組み込みます.\n\nADDDRV [ﾄﾞﾗｲﾌﾞ:][ﾊﾟｽ]ﾌｧｲﾙ名\n  [ﾄﾞﾗｲﾌﾞ:][ﾊﾟｽ]ﾌｧｲﾙ名   定義ファイルを指定します.\n
ASSOC /// ファイル拡張子の関連付けを表示または変更します。\n\nASSOC [.拡張子[=[ファイルタイプ]]]\n\n  .拡張子         ファイル タイプに関連付ける拡張子を指定します。\n  ファイルタイプ  拡張子に関連付けるファイル タイプを指定します。\n\nパラメータを指定しないで ASSOC と入力すると、現在のファイルの関連付け\nを表示します。ファイル拡張子を指定して ASSOC を実行すると、そのファイル\n拡張子の現在のファイルの関連付けを表示します。ファイル タイプやコマンド\nを指定しないと、そのファイル拡張子の関連付けを削除します。\n
AT /// AT コマンドは、指定された日時にコマンドとプログラムがコンピュータで\n実行されるようにスケジュールします。AT コマンドを使用するには、\nSchedule サービスが実行中でなければなりません。\n\nAT [\\コンピュータ名] [ [id] [/DELETE] | /DELETE [/YES]]\nAT [\\コンピュータ名] 時刻 [/INTERACTIVE]\n   [ /EVERY:日付[,...] | /NEXT:日付[,...]] "コマンド"\n\n\\コンピュータ名     リモート コンピュータを指定します。このパラメータを\n                     省略したときは、ローカル コンピュータでコマンドが\n                     スケジュールされます。\nid                   スケジュールされたコマンドに割り当てられた識別番号です。\n/delete              スケジュールされたコマンドを取り消します。\n                     id を指定しなかったときは、コンピュータでスケジュール\n                     されているすべてのコマンドが取り消されます。\n/yes                 確認せずにすべてのジョブ コマンドを取り消すときに\n                     使用します。\n時刻                 コマンドが実行される時刻を指定します。\n/interactive         ジョブの実行中、ジョブはログオンしているユーザーの\n                     デスクトップとの対話を許可します。\n/every:日付[,...]    毎週指定した曜日に、または毎月指定した日にコマンドが\n                     実行されます。\n                     日付を省略したときは、その月の今日の日付が使用されます。\n/next:日付[,...]     指定したコマンドが次の日付 (たとえば、次の火曜日) に\n                     実行されます。日付を省略したときは、その月の今日の日付が\n                     使用されます。\n"コマンド"           実行する Windows NT コマンド、またはバッチ プログラム\n                     です。\n\n
ATTRIB /// ファイル属性を表示または変更します。\n\nATTRIB [+R | -R] [+A | -A] [+S | -S] [+H | -H] [[ドライブ:] [パス] ファイル名]\n       [/S [/D]]\n\n  +   属性を設定します。\n  -   属性を解除します。\n  R   読み取り専用属性。\n  A   アーカイブ属性。\n  S   システム ファイル属性。\n  H   隠しファイル属性。\n  /S  現在のディレクトリとすべてのサブフォルダーの一致するファイルを\n      処理します。\n  /D  フォルダーも処理します。\n\n
BREAK /// DOS システム上で Ctrl+C キーの拡張チェック機能を設定または解除します。\n\nこの機能は DOS システムとの互換性を維持するために用意されています。Windows 2000\n上では何も効果はありません。\n\nWindows 2000 プラットフォームでコマンド拡張機能を有効にして実行中の場合、\nデバッガによるデバッグ時に BREAK コマンドはハードコード ブレークポイント\nを入力します。\n
CACLS /// ファイルのアクセス制御リスト(ACL) を表示または変更します。\n\nCACLS ファイル名 [/T] [/E] [/C] [/G ユーザー名:アクセス権] [/R ユーザー名 [...]]\n[/P ユーザー名:アクセス権 [...]] [/D ユーザー名 [...]]\n  ファイル名        ACL を表示します。\n  /T                現在のディレクトリとすべてのサブディレクトリにある\n                    指定されたファイルの ACL を変更します。\n  /E                ACL を置き換えずに、ACL を編集します。\n  /C                アクセス拒否エラーを無視して、ACL の変更を続行します。\n  /G ユーザー:アクセス権   \n                    指定されたユーザーにアクセス権を与えます。\n                    アクセス権: R  読み取り\n                                W  書き込み\n                                C  変更 (書き込み)\n                                F  フル コントロール\n  /R ユーザー名     指定されたユーザーのアクセス権を失効させます。\n                    (/E オプションと共に使用)。\n  /P ユーザー名:アクセス権\n                    指定されたユーザーのアクセス権を置き換えます。\n                    アクセス権: N  なし\n                                W  書き込み\n                                R  読み取り\n                                C  変更 (書き込み)\n                                F  フル コントロール\n  /D ユーザー名     指定されたユーザーのアクセスを拒否します。\n複数のファイルを指定するには、ワイルドカードを使用できます。\n複数のユーザーを指定できます。\nCALL /// バッチ プログラムを別のバッチ プログラムから呼び出します。\n\nCALL [ドライブ:][パス]ファイル名 [バッチパラメータ]\n\n  バッチパラメータ   バッチ プログラムで必要なコマンド ライン情報を指定します。\n\nコマンド拡張機能を有効にすると、CALL は次のように変更されます:\n\nCALL コマンドは、CALL のターゲットとしてラベルを受け付けるようになります。\n構文は、次のとおりです:\n\n    CALL :ラベル 引数\n\n指定された引数で新しいバッチ ファイル コンテキストが作成され、指定\nされたラベルの次の文に制御が渡されます。バッチ スクリプト ファイルの\n最後に 2 回到達することによって、2 回 "終了" する必要があります。\n1 回目に最後に到達したときには、制御は CALL 文の次の行に返されます。\n2 回目に、バッチ スクリプトが終了します。バッチ スクリプトから "戻る"\nための GOTO :EOF 拡張機能の説明については、GOTO /? と入力してください。\n\nまた、バッチ スクリプトの引数参照 (%0、%1 など) の展開は、次のように\n変更されました:\n\n\n    %* バッチ スクリプト内では、すべての引数 (%1、%2、%3、%4、\n        %5 など) を参照します。\n\n    バッチ パラメータ (%n) の置換は拡張されました。次のオプション構文\n    を使うことができます:\n\n        %~1         - すべての引用句 (") を削除して、\n                      %1 を展開します。\n        %~f1        - %1 を完全修飾パス名に展開します。\n        %~d1        - %1 をドライブ文字だけに展開します。\n        %~p1        - %1 をパスだけに展開します。\n        %~n1        - %1 をファイル名だけに展開します。\n        %~x1        - %1 をファイル拡張子だけに展開します。\n        %~s1        - 展開されたパスは、短い名前だけを含みます。\n        %~a1        - %1 をファイル属性に展開します。\n        %~t1        - %1 をファイルの日付/時刻に展開します。\n        %~z1        - %1 をファイルのサイズに展開します。\n        %~$PATH:1   - PATH 環境変数に指定されているディレクトリを\n                      検索し、最初に見つかった完全修飾名に %1 を\n                      展開します。環境変数名が定義されていない場合、\n                      または検索してもファイルが見つからなかった\n                      場合は、この修飾子を指定すると空の文字列に\n                      展開されます。\n\n    修飾子を組み合わせて、複合結果を得ることもできます:\n\n        %~dp1       - %1 をドライブ文字とパスだけに展開します。\n        %~nx1       - %1 をファイル名と拡張子だけに展開します。\n        %~dp$PATH:1 - PATH 環境変数に指定されているディレクトリを\n                      検索して %1 を探し、最初に見つかったファイル\n                      のドライブ文字とパスだけに展開します。\n        %~ftza1     - %1 を DIR の出力行のように展開します。\n\n    上の例の %1 と PATH は、ほかの有効な値で置き換えることができ\n    ます。%~ 構文は有効な引数の数によって区切られます。%~ 修飾子\n    は %* と同時には使用できません。\n
CHCP /// 現在のコード ページ番号を表示または設定します。\n\nCHCP [nnn]\n\n  nnn   コード ページ番号を指定します。\n\n現在のコード ページ番号を表示するときは、パラメータを指定せずに CHCP と入力してください。\n
CHDIR,CD /// 現在のディレクトリを変更したり、ディレクトリ名を変更したりします。\n\nCHDIR [/D] [ドライブ:][パス]\nCHDIR [..]\nCD [/D] [ドライブ:][パス]\nCD [..]\n\n  ..   親ディレクトリに変更するときに指定します。\n\nCD ドライブ: と入力すると指定されたドライブの現在のディレクトリが表示\nされます。パラメータを指定しないで CD と入力すると、現在のドライブと\nディレクトリが表示されます。\n\n現在のディレクトリだけでなく、現在のドライブも変更するには /D オプショ\nンを使用してください。\n\nコマンド拡張機能を有効にすると、CHDIR は次のように変更されます:\n\n現在のディレクトリの文字列に入力された大文字と小文字は、ディスク上の名前\nと同じになるように変換されます。たとえば、ディスク上のディレクトリ名が\nTemp である場合、CD C:\TEMP と入力すると、現在のディレクトリは C:\Temp\nに設定されます。\n\nCHDIR コマンドは空白を区切り文字として扱わなくなるため、空白文字を\n含むサブディレクトリ名を引用符で囲まなくても、そのサブディレクトリ\nに CD できるようになります。たとえば、\n\n    cd \winnt\profiles\username\programs\start menu\n\nは、次と同じです:\n\n    cd "\winnt\profiles\username\programs\start menu"\n\n拡張機能が無効である場合は、こちらを入力します。\n
CHKDSK /// ディスクをチェックし、現在の状態を表示します。\n\n\nCHKDSK [ボリューム[[パス]ファイル名]]] [/F] [/V] [/R] [/X] [/I] [/C] [/L[:サイズ]]\n\n\n  ボリューム      ドライブ文字 (文字の後にはコロンを付ける)、マウント\n                  ポイント、ボリューム名を指定します。\n  ファイル名      FAT のみ: 断片化をチェックするファイルを\n                  指定します。\n  /F              ディスクのエラーを修復します。\n  /V              FAT/FAT32:ディスクの全ファイルの完全なパスと名前を表示しま\n                  す。\n                  NTFS: クリーン アップ メッセージがあればそれも表示します。\n  /R              不良セクタを見つけ、読み取り可能な情報を回復します。\n                  (/F を意味します)\n  /L:サイズ       NTFS のみ: ログ ファイル サイズを指定された KB 数に\n                  変更します。サイズが指定されていないときは、現在のサイズ\n                  を表示します。\n  /X              必要であれば、最初にボリュームを強制的にマウントを解除\n                  します。ボリュームへ開かれているすべてのハンドルは、無効\n                  になります。\n  /I              NTFS のみ: インデックス エントリのチェックを抑制して実施\n                  します。\n  /C              NTFS のみ; フォルダー構造内の周期的なチェックをスキップ\n                  します。\n\n/I または /C スイッチは、ボリュームのあるチェックをスキップして、Chkdsk の実\n行時間を短くします。\n\n
CHKNTFS /// CHKNTFS ボリューム [...]\nCHKNTFS /D\nCHKNTFS /T[:時間]\nCHKNTFS /X ボリューム [...]\nCHKNTFS /C ボリューム [...]\n\n  ボリューム  ドライブ文字 (文字の後にはコロンを付ける)、マウント\n               ポイント、ボリューム名を指定します。\n  /D          コンピュータを既定の動作に戻します。\n              起動時にすべてのドライブを検査し、エラーがあったドライブに\n              対して CHKDSK を実行します。\n  /T:時間     指定された時間を秒に変換して、AUTOCHK を開始するカウント\n              ダウン時間へ設定します。\n              時間が指定されていなければ、現在の設定を表示します。\n  /X          ドライブを既定の起動時の検査から除外します。\n              除外するドライブは、このコマンドを実行するたびに指定する\n              必要があります。\n  /C          ブート時にドライブを検査するようにスケジュールします。\n              ドライブにエラーがある場合、chkdsk が起動されます。\n\nスイッチが指定されていない場合、指定されたドライブにエラーがあるかどうか、\n次回の再起動で確認を行うようスケジュールされているかどうかを表示します。\n
CIPHER /// NTFS パーティション上のディレクトリ [ファイル] の暗号化を表示または変更します。\n\n  CIPHER [/E | /D] [/S:ディレクトリ] [/A] [/I] [/F] [/Q] [/H] [/K]\n         [パス名 [...]]\n\n  CIPHER /W:ディレクトリ\n\n    /E        指定されたディレクトリを暗号化します。後で追加された\n              ファイルが暗号化されるようにディレクトリをマークします。\n    /D        指定されたディレクトリの暗号化を解除します。後で追加された\n              ファイルが暗号化されないようにディレクトリをマークします。\n    /S        指定されたディレクトリとすべてのサブディレクトリに\n              対して指定された操作を実行します。\n    /A        ファイルおよびディレクトリに対して操作を実行します。\n              親ディレクトリが暗号化されていない場合、暗号はファイルが\n              修正されると解除されます。ファイルと親ディレクトリの両方を\n              暗号化することをお勧めします。\n    /I        エラーが発生しても指定された操作を実行し続けます。既定では、\n              エラーが発生すると CIPHER は停止されます。\n    /F        暗号化済みのオブジェクトも含めて、指定されたすべてのオブジェ\n              クトを強制的に暗号化します。既定では暗号化済みのオブジェ\n              クトはスキップされます。\n    /Q        重要な情報だけを報告します。\n    /H        隠しファイルやシステム属性のファイルを表示します。\n              既定ではこれらのファイルは省略されます。\n    /K        CIPHER を実行しているユーザー用に新しいファイル暗号化キーを\n              作成します。このオプションが指定されると、その他のオプションは\n              すべて無視されます。\n    /W        ボリュームで利用可能な未使用のディスクから、データを削除します。\n              このオプションを選んだ場合は、ほかのオプションはすべて無視されま\n              す。ローカル ボリューム上のどの場所にあるディレクトリでも指定す\n              ることができます。ディレクトリがマウント ポイントである場合、\n              または別のボリュームのディレクトリを指し示す場合は、そのボリュー\n              ムのデータが削除されます。\n\n    ディレクトリ  ディレクトリのパスです。\n    パス名        パターン、ファイル、またはディレクトリを指定します。\n\n    パラメータを指定せずに CIPHER を実行すると、現在のディレクトリと\n    ディレクトリに含まれるすべてのファイルの暗号化状態を表示します。\n    複数のディレクトリ名やワイルドカードを指定できます。複数のパラメータ\n    を指定する場合は、パラメータをスペースで区切ってください。\n
CLS /// 画面を消去します。\n\n
CMD /// Windows 2000 コマンド インタープリタの新しいインスタンスを開始します。\n\nCMD [/A | /U] [/Q] [/D] [/E:ON | /E:OFF] [/F:ON | /F:OFF] [/V:ON | /V:OFF]\n\n    [[/S] [/C | /K] 文字列]\n\n/C      "文字列" に指定されたコマンドを実行した後、終了します。\n/K      "文字列" に指定されたコマンドを実行しますが、終了しません。\n/S      /C または /K の後の文字列の扱いを変更します (以下の説明を参照してくだ\n        さい)。\n/Q      エコーをオフにします。\n/D      レジストリからの AutoRun コマンドの実行を無効にします\n        (下記を参照してください)。\n/A      内部コマンドの出力結果を ANSI でパイプまたはファイルに出力します。\n/U      内部コマンドの出力結果を Unicode でパイプまたはファイルに出力します。\n/T:fg   前景色および背景色を設定します (詳細は COLOR /? を参照してください)。\n/E:ON   コマンド拡張機能を有効にします (以下の説明を参照してください)。\n/E:OFF  コマンド拡張機能を無効にします (以下の説明を参照してください)。\n/F:ON   ファイル名およびディレクトリ名補完文字を有効にします\n        (以下の説明を参照してください)。\n/F:OFF  ファイルおよびディレクトリ名補完文字を無効にします\n        (以下の説明を参照してください)。\n/V:ON   区切り文字として c を使って遅延環境変数の展開を有効にします。\n        たとえば、 /V:ON とすると、!var! は、実行時に変数 var を展開します。\n        var 構文は、FOR ループ中とは違い、入力時に変数を展開します。\n/V:OFF  遅延環境展開を無効にします。\n\nコマンド セパレータ '&&' で区切られた複数のコマンドが引用符で囲まれている場合\nは、"文字列" として指定されます。また互換性の理由から /X と /E:ON、/Y と\n/E:OFF、および /R と /C は同じです。そのほかのスイッチは無視されます。\n\n/C または /K が指定されている場合、スイッチの後の残りのコマンド ラインがコマ\nンド ラインとして処理されます。次のルールが引用符 (") の処理に使われます:\n\n    1.  次のすべての条件に一致する場合、コマンド ラインの引用符が有効になり\n        ます:\n\n        - /S スイッチがない\n        - 引用符が 1 組ある\n        - 引用符の中に特殊文字がない\n          (特殊文字は &<>()@^| です)\n        - 引用符の中に 1 つ以上のスペースがある\n        - 引用符の中の文字列が、実行可能ファイルの名前である\n\n    2.  最初の文字が引用符であるにも関わらず上の条件に一致しない場合は、最初\n        の引用符とコマンド ラインの最後の引用符が削除され、 最後の引用符のあ\n        とのテキストが有効になります。\n\nコマンド ラインで /D が指定されなかった場合は、CMD.EXE の開始時に次の REG_SZ\nまたは REG_EXPAND_SZ レジストリ変数が検索されます。次のレジストリ変数の両方ま\nたはどちらかが存在する場合、それらを最初に実行します。\n\n    HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor\AutoRun\n\n    HKEY_CURRENT_USER\Software\Microsoft\Command Processor\AutoRun\n\n既定では、コマンド拡張機能は有効です。拡張機能を無効にして CMD.EXE を起動する\nには、/E:OFF スイッチを使用します。コンピュータまたはユーザー ログオン セッ\nションで起動される CMD.EXE コマンドすべてに対して拡張機能を有効または無効に\nするには、 REGEDIT32.EXE を使ってレジストリにある次の REG_DWORD 値を設定しま\nす。\nコンピュータに対しては、\n\n    HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor\EnableExtensions\n\nに 0x1 を設定すると有効になり、0x0 を設定すると無効になります。\nログオン セッションに対しては、\n\n    HKEY_CURRENT_USER\Software\Microsoft\Command Processor\EnableExtensions\n\nに 0x1 を設定すると有効になり、 0x0 を設定すると無効になります。\nユーザー固有の設定は、コンピュータの設定より優先されます。\nコマンド ライン スイッチは、レジストリの設定より優先されます。\n\nコマンド拡張機能には、次のコマンドに対する変更または追加が含まれています。\n\n    DEL または ERASE\n    COLOR\n    CD または CHDIR\n    MD または MKDIR\n    PROMPT\n    PUSHD\n    POPD\n    SET\n    SETLOCAL\n    ENDLOCAL\n    IF\n    FOR\n    CALL\n    SHIFT\n    GOTO\n    START (外部コマンドの起動の変更を含みます)\n    ASSOC\n    FTYPE\n\n詳細は、コマンド名の後に /? と入力すると表示されるヘルプを参照してください。\n\n既定では、遅延環境変数の展開は有効ではありません。遅延環境変数の展開を有効また\nは無効にして CMD.EXE を起動するには、/V:ON または /V:OFF スイッチを使います。\nコンピュータまたはログオン セッションで起動される CMD.EXE コマンドすべてに対し\nて補完を有効または無効にするには、REGEDIT32.EXE を使ってレジストリにある次の\nREG_DWORD 値を設定します。\nコンピュータに対しては、\n\n    HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor\DelayedExpansion\n\nに 0x1 を設定すると有効になり、0x0 を設定すると無効になります。\nユーザー ログオン セッションに対しては、\n\n    HKEY_CURRENT_USER\Software\Microsoft\Command Processor\DelayedExpansion\n\nに 0x1 を設定すると有効になり、0x0 を設定すると無効になります。\nユーザー固有の設定は、コンピュータの設定より優先されます。\nコマンド ライン スイッチは、レジストリの設定より優先されます。\n\n遅延環境変数の展開が有効になっている場合、感嘆符を使うと実行時に環境変数の\n値を置き換えることができます。\n\n既定では、ファイルおよびディレクトリ名補完機能は有効ではありません。ファイル\n名の補完機能を有効または無効にして CMD.EXE を起動するには、/F:ON または /F:OFF\nスイッチを使います。コンピュータまたはログオン セッションで起動されるCMD.EXE\nコマンドすべてに対して補完機能を有効または無効にするには、REGEDIT32.EXE を使っ\nてレジストリにある次の REG_DWORD 値を設定します。\nコンピュータに対しては、\n\n  HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor\CompletionChar\n  HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor\PathCompletionChar\n\nに特定の機能に使う 16 進の制御文字を設定します (例 0x4 は Ctrl-D、0x6 は\nCtrl-F)。\nユーザー ログオン セッションに対しては、\n\n  HKEY_CURRENT_USER\Software\Microsoft\Command Processor\CompletionChar\n  HKEY_CURRENT_USER\Software\Microsoft\Command Processor\PathCompletionChar\n\nに特定の機能に使う 16 進の制御文字を指定します (例: 0x4 は Ctrl-D、0x6 は\nCtrl-F)。\nユーザー固有の設定は、コンピュータの設定より優先されます。\nコマンド ライン スイッチは、レジストリの設定より優先されます。\n\n/F:ON スイッチで補完機能を有効にした場合、2 つの制御文字 (Ctrl-D はディレクト\nリ名補完機能、Ctrl-F はファイル名補完機能) が使用されます。\nレジストリで特定の補完文字を無効にするには、制御文字として有効でないスペース\n(0x20) の値を使用します。\n	\n2 つの制御文字のどちらかを入力すると、補完機能が起動されます。パスが存在しな\nい場合、プログラムはカーソルの左側のパス文字列にワイルド カード文字を付加し、\n一致するパスの一覧を作成します。その後一致する最初のパスを表示します。\nパスが一致しない場合、音を鳴らします。同じ制御文字を押し続けると一致するパス\nの一覧を順に表示します。Shift キーを押しながら制御文字を押すと一覧を逆回り表\n示します。行を編集して制御文字をもう一度押すと、保存されていた一致したパスの\n一覧は破棄され、新しい一覧が作成されます。ファイル名補完機能とディレクトリ名\n補完機能を切り替えたときも同様です。2 つの制御文字の違いは、ディレクトリ補完\n文字がディレクトリ名だけを照合するのに対し、ファイル名補完文字はファイルと\nディレクトリ名の両方を照合する点です。ファイル補完機能が内部ディレクトリコマ\nンド (CD、MD または RD) に使用された場合、ディレクトリ補完機能と見なされま\nす。\n\n一致するパスの前後に引用符を付けると、補完機能コードでスペースまたはほかの特\n別な文字を含むファイル名が使用できるようになります。また、行の前に戻って補完\n機能を起動した場合、補完機能が呼び出された時点でカーソルの右側にあったテキス\nトは破棄されます。\n
COLOR /// コンソールの既定の前景色および背景色を設定します。\n\nCOLOR [属性]\n\n  属性        コンソール出力の色属性を指定します。\n\n色属性は、2 桁の 16 進数で指定します。1 桁目は背景に、2 桁目\nは前景に対応します。各桁には、次のいずれかの値を指定すること\nができます:\n\n    0 = 黒          8 = 灰色\n    1 = 青          9 = 明るい青\n    2 = 緑          A = 明るい緑\n    3 = 水色        B = 明るい水色\n    4 = 赤          C = 明るい赤\n    5 = 紫          D = 明るい紫\n    6 = 黄色        E = 明るい黄色\n    7 = 白          F = 輝く白\n\n引数を指定しないでこのコマンドを実行すると、CMD.EXE が起動されたときの\n色を復元します。この値は、現在のコンソール ウィンドウ、/T コマンド\nライン スイッチ、またはレジストリの DefaultColor 値から取得されます。\n\n前景と背景に同じ色を指定して COLOR コマンドを実行しようとすると、\nCOLOR コマンドは、ERRORLEVEL を 1 に設定します。\n\n例: "COLOR fc" は、輝く白の上に明るい赤を表示します。\n
COMP /// 2 つのファイルまたはファイル セットの内容を比較します。\n\nCOMP [データ1] [データ2] [/D] [/A] [/L] [/N=行数] [/C]\n\n  データ1     比較する最初のファイルの位置と名前を指定します。\n  データ2     比較する 2 番目のファイルの位置と名前を指定します。\n  /D          相違点を 10 進数で表示します。\n  /A          相違点を ASCII 文字で表示します。\n  /L          相違する行の行番号を表示します。\n  /N=行数     各ファイルの先頭から指定された行数だけを比較します。\n  /C          ファイルを比較するときに ASCII 文字の大文字と小文字を区別しま\n              せん。\n\nファイル セットを比較するときは、データ1 パラメータとデータ2 パラメータで\nワイルド カードを使用します。\n
COMPACT /// NTFS パーティション上のファイルの圧縮状態を表示または変更します。\n\nCOMPACT [/C | /U] [/S[:ディレクトリ]] [/A] [/I] [/F] [/Q] [ファイル名 [...]]\n\n  /C           指定されたファイルを圧縮します。後で追加されたファイルが\n               圧縮されるように、ディレクトリはマークされます。\n  /U           指定されたファイルを圧縮解除します。後で追加されたファイル\n               が圧縮されないように、ディレクトリはマークされます。\n  /S           指定されたディレクトリおよびそのサブディレクトリにある\n               ファイルに、指定された操作を実行します。\n               "ディレクトリ" の既定値は現在のディレクトリです。\n  /A           隠しファイルやシステム ファイルも表示します。既定の設定では\n               これらのファイルは省略されます。\n  /I           エラーが発生した場合でも、指定された処理を続行します。\n               既定の設定では、エラーが発生すると COMPACT は停止されます。\n  /F           
CONVERT /// FAT ボリュームを NTFS に変換します。\n\nCONVERT ボリューム /FS:NTFS [/V]\n\n  ボリューム  ドライブ文字 (文字の後にはコロンを付ける)、マウント\n              ポイント、ボリューム名を指定します。\n  /FS:NTFS    ボリュームを NTFS に変換することを指定します。\n  /V          詳細モードで変換することを指定します。\n
COPY /// 1 つまたは複数のファイルを別の場所にコピーします。\n\nCOPY [/V] [/N] [/Y | /-Y] [/Z] [/A | /B]送り側 [/A | /B]\n     [+ 送り側 [/A | /B] [+ ...]] [受け側 [/A | /B]]\n\n  送り側    コピーするファイル (複数可) を指定します。\n  /A        ASCII テキスト ファイルとして扱います。\n  /B        バイナリ ファイルとして扱います。\n  受け側    新しいファイルのディレクトリまたはファイル名 (複数可) を指定し\n            ます。\n  /V        新しいファイルが正しく書き込まれたか検査します。\n  /N        MS-DOS 形式以外の名前のファイルをコピーするときに、利用可能な\n            らば、短いファイル名を使用します。\n  /Y        受け側の既存のファイルを上書きする前に確認のメッセージを表示し\n            ません。\n  /-Y       受け側の既存のファイルを上書きする前に確認のメッセージを表示し\n            ます。\n  /Z        ネットワーク ファイルを再起動可能モードでコピーします。\n\n環境変数 COPYCMD でスイッチ /Y が設定されている場合があります。\nこのスイッチは、コマンド ラインから /-Y が指定されると無効になります。既定\nでは、COPY コマンドがバッチ スクリプトから実行されていない場合、上書き確認\nメッセージが表示されます。\n\n複数のファイルを付加するときは、受け側に 1 個のファイルを指定し、送り側に\n複数のファイルを指定します (ワイルドカードを使うか、ファイル1+ファイル2+\nファイル3 と指定します)。\n
COUNTRY /// MS-DOS サブシステムで、各国対応の時刻、日付、通貨、大文字小文字変換、および桁区切り記号を使えるようにします。\n\ncountry コマンドを実行すると、MS-DOS サブシステムは、サポート対象言語を使う場合に準拠する文字セットと区切り規則を認識するように設定されます。国/地域の設定を読み込むには、%systemroot%\System32\Config.nt ファイルを使うか、またはプログラムの PIF で指定された同等の起動ファイルを使います。\n\nCOUNTRY=xxx[,[yyy][,[drive:][path] filename]]\n\nパラメータ\n\nxxx   カントリ コードを指定します。\nyyy   その国および地域用のコード ページを指定します。\n[drive:][path] filename\n      国および地域別情報が入っているファイルの場所と名前を指定します。\n
DATE /// 日付を表示または設定します。\n\nDATE [/T | 日付]\n\nパラメータの指定がない場合は、現在の日付が表示され、新しい日付の入力を\n求められます。変更しない場合は、Enter キーを押します。\n\nコマンド拡張機能を有効にすると、DATE コマンドは、/T スイッチを\nサポートするようになります。このスイッチを指定すると、現在の日付\nだけが表示され、新しい日付を入力するためのプロンプトは表示されません。\n
DEBUG /// プログラムのテスト/編集ツールであるデバッガを起動します.\n\nDEBUG [[ﾄﾞﾗｲﾌﾞ:][ﾊﾟｽ]ﾌｧｲﾙ名 [ﾃｽﾄﾌｧｲﾙ-ﾊﾟﾗﾒｰﾀ]]\n\n  [ﾄﾞﾗｲﾌﾞ:][ﾊﾟｽ]ﾌｧｲﾙ名\n                   テストするファイルを指定します.\n  ﾃｽﾄﾌｧｲﾙ-ﾊﾟﾗﾒｰﾀ   テストするファイルが必要とするコマンドライン情報を\n                   指定します.\n\nDEBUG 起動後に, ? を入力するとデバッガのコマンド一覧が表示されます.\n
DEL,ERASE /// ファイル (複数可) を削除します。\n\nDEL [/P] [/F] [/S] [/Q] [/A[[:]属性]] 名前\nERASE [/P] [/F] [/S] [/Q] [/A[[:]属性]] 名前\n\n  名前          ファイルまたはディレクトリ (複数可) の一覧を指定します。\n                複数のファイルを削除するときはワイルドカードを使用します。\n                ディレクトリが指定されたときはディレクトリ内のすべてのファ\n                イルは削除されます。\n\n  /P            各ファイルを削除する前に確認のメッセージを表示します。\n  /F            読み取り専用ファイルを強制的に削除します。\n  /S            指定されたファイルをすべてのサブディレクトリから削除します。\n  /Q            ワイルドカードを使用して一括削除するときに、確認のメッセージ\n                を表示しません。(QUIET モード)\n  /A            属性により削除するファイルを選択します。\n  属性          R  読み取り専用            S  システム ファイル\n                H  隠しファイル            A  アーカイブ\n                -  その属性以外\n\nコマンド拡張機能を有効にすると、DEL と ERASE は次のように変更されます:\n\n/S スイッチの表示形式が逆になり、見つからなかったファイルではなく\n削除されたファイルだけが表示されるようになります。\n
DELDRV /// ADDDRV で組み込んだデバイスドライバーを取り外します.\n\nDELDRV\n\n
DEVICE /// 指定したデバイス ドライバーをメモリに読み込みます。\n\nMS-DOS 用のデバイス ドライバーを読み込むには、systemroot\System32\Config.nt ファイルを使うか、またはプログラムの PIF で指定された同等の起動ファイルを使います。\n\nパラメータ\n\n[[drive:][path] filename\n\n        読み込みたいデバイス ドライバーの場所と名前を指定します。\n\n[dd-parameters]\n\n        デバイス ドライバーに必要なコマンド ライン情報を指定します。\n\n詳細については、"関連項目" の一覧の "Devicehigh" を参照してください。\n
DEVICEHIGH /// デバイス ドライバーをアッパー メモリ領域に読み込みます。ほかのプログラムが使用できるメイン メモリの容量を増加させます。MS-DOS 用のデバイス ドライバーを読み込むには、systemroot\System32\Config.nt ファイルを使うか、またはプログラムの PIF で指定された同等の起動ファイルを使います。\n\n\ndevicehigh=[drive:][path] filename [dd-parameters]\n\ndevicehigh でデバイス ドライバーをアッパー メモリ領域に読み込む前に、利用可能にしなければならないメモリの最小容量を指定するには、次の構文を使います。\n\ndevicehigh size=hexsize [drive:][path] filename [dd-parameters]\n\nパラメータ\n\n[drive:][path]\n        アッパー メモリ領域に読み込みたいデバイス ドライバーの場所と名前を指定します。 \n\ndd-parameters\n        デバイス ドライバーに必要なコマンド ライン情報を指定します。 \n\nhexsize\n        devicehigh コマンドがデバイス ドライバーをアッパー メモリ領域に読み込む前に、利用可能にしなければならないメモリの最小容量 (16 進形式によるバイト数) を指定します。第 2 の構文行のように、size = 16進サイズ を使わなければなりません。 \n\n詳細については、"関連項目" の一覧で "Loadhigh" または "Device" をクリックしてください。\n
DIR /// ディレクトリ中のファイルとサブディレクトリを一覧表示します。\n\nDIR [ドライブ:][パス][ファイル名] [/A[[:]属性]] [/B] [/C] [/D] [/L] [/N]\n  [/O[[:]ソート順]] [/P] [/Q] [/S] [/T[[:]タイムフィールド]] [/W] [/X] [/4]\n\n  [ドライブ:][パス][ファイル名]\n              一覧表示するドライブ、ディレクトリ、またはファイルを指定します。\n\n  /A          指定された属性のファイルを表示します。\n  属性         D  ディレクトリ                R  読み取り専用\n               H  隠しファイル                A  アーカイブ\n               S  システム ファイル           -  その属性以外\n  /B          ファイル名のみを表示します (見出しや要約が付きません)。\n  /C          ファイル サイズを桁区切り表示します。これは\n              既定の設定です。/-C とすると桁区切り表示されません。\n  /D          /W と同じですが、ファイルを列で並べ替えた一覧を表示します。\n  /L          小文字で表示します。\n  /N          ファイル名を右端に表示する一覧形式を使用します。\n  /O          ファイルを並べ替えて表示します。\n  ソート順    N  名前順 (アルファベット)     S  サイズ順 (小さいほうから)\n              E  拡張子順 (アルファベット)   D  日時順 (古いほうから)\n              G  グループ (ディレクトリから) -  降順\n  /P          1 画面ごとに停止して表示します。\n  /Q          ファイルの所有者を表示します。\n  /S          指定されたディレクトリおよびそのサブディレクトリのすべての\n              ファイルを表示します。\n  /T          どのタイムフィールドを表示するか、または並べ替えに使用するかを\n              指定します。\n  タイムフィールド    C  作成\n                      A  最終アクセス\n                      W  最終更新\n  /W          ワイド一覧形式で表示します。\n  /X          このオプションは MS-DOS 形式以外のファイル名に対する短い名前を\n              表示します。長い名前の前に短い名前を表示する点を除けば、\n              /N オプションと同じです。短い名前がない場合は、ブランクに\n              なります。\n  /4          4 つの数字で年を表示します。\n\n環境変数 DIRCMD にスイッチを設定できます。\n/-W のように - (ハイフン) を前につけると、そのスイッチは無効になります。\n
DISKCOMP /// 2 枚のフロッピー ディスクの内容を比較します。\n\nDISKCOMP [ドライブ1: [ドライブ2:]]\n\n
DISKCOPY /// フロッピー ディスクの内容を別のディスクにコピーします。\n\nDISKCOPY [ドライブ1: [ドライブ2:]] [/V]\n\n  /V   正しくコピーされたかどうか照合します。\n\n同じ種類のフロッピー ディスクを使わなければなりません。\nドライブ1 とドライブ2 には同じドライブを指定することもできます。\n
DISKPERF /// システム モニタを使って表示できるカウンタの種類を制御します。\n\nDISKPERF [-Y[D|V] | -N[D|V]] [\\コンピュータ名]\n\n  -Y  システムが再起動したときに、システムがすべてのディスク\n      パフォーマンス カウンタを開始するように設定します。\n  -YD システムが再起動したときに、物理ドライブのディスク パフォー\n      マンス カウンタを有効にします。\n\n  -YV システムが再起動したときに、論理ドライブまたは記憶域ボリュー\n      ムのディスク パフォーマンス カウンタを有効にします。\n\n  -N  システムが再起動したときに、システムがすべてのディスク\n      パフォーマンス カウンタを無効にするように設定します。\n\n  -ND 物理ドライブのディスク パフォーマンス カウンタを無効にします。\n  -NV 論理ドライブのディスク パフォーマンス カウンタを無効にします。\n  \\コンピュータ名      ディスク パフォーマンス カウンタを使う\n                        とき、参照するか、または設定するコンピュータの名前です\n
DEBUG /// プログラムのテスト/編集ツールであるデバッガを起動します.\n\nDEBUG [[ﾄﾞﾗｲﾌﾞ:][ﾊﾟｽ]ﾌｧｲﾙ名 [ﾃｽﾄﾌｧｲﾙ-ﾊﾟﾗﾒｰﾀ]]\n\n  [ﾄﾞﾗｲﾌﾞ:][ﾊﾟｽ]ﾌｧｲﾙ名\n                   テストするファイルを指定します.\n  ﾃｽﾄﾌｧｲﾙ-ﾊﾟﾗﾒｰﾀ   テストするファイルが必要とするコマンドライン情報を\n                   指定します.\n\nDEBUG 起動後に, ? を入力するとデバッガのコマンド一覧が表示されます.
DOSKEY /// コマンド ラインの編集、Windows 2000 コマンドの呼び戻し、マクロの作成を行います。\n\nDOSKEY [/REINSTALL] [/LISTSIZE=サイズ] [/MACROS[:ALL | :実行ファイル名]]\n  [/HISTORY] [/INSERT | /OVERSTRIKE] [/EXENAME=実行ファイル名] [/MACROFILE=ファイル名]\n  [マクロ名=[テキスト]]\n\n  /REINSTALL               Doskey の新しいコピーを組み込みます。\n  /LISTSIZE=サイズ         コマンド履歴バッファのサイズを設定します。\n  /MACROS                  すべての Doskey マクロを表示します。\n  /MACROS:ALL              Doskey マクロを含むすべての実行可能ファイルの\n                           すべての Doskey マクロを表示します。\n  /MACROS:実行ファイル名\n                           指定した実行可能ファイルのすべての Doskey マクロを\n                           表示します。\n  /HISTORY                 メモリ内のすべてのコマンドを表示します。\n  /INSERT                  入力したテキストが古いテキストに挿入されるように\n                           指定します。\n  /OVERSTRIKE              入力したテキストが古いテキストを上書きするように\n                           指定します。\n  /EXENAME=実行ファイル名  実行可能ファイルを指定します。\n  /MACROFILE=ファイル名    作成するマクロ ファイル名を指定します。\n  マクロ名                 作成するマクロ名を指定します。\n  テキスト                 登録するコマンドを指定します。\n\n上下方向キーはコマンドを再度呼び出します。Esc はコマンド ラインをクリア\nします。F7 はコマンド履歴を表示します。Alt+F7 はコマンド履歴をクリアします。\nF8 はコマンド履歴を検索します。F9 は数字によるコマンドを選択します。\nAlt+F10 はマクロ定義をクリアします。\n\n以下は、DOSKEY のマクロ定義で使用する特殊コードです:\n$T     コマンド セパレータです。マクロ中で複数のコマンドを定義できます。\n$1-$9  バッチ パラメータです。バッチ ファイル中の %1-%9 と同じ意味です。\n$*     コマンド ライン上のマクロ名に続くテキストで置き換えられるシンボルです。\n
DOSX /// 
ECHO /// メッセージを表示したり、コマンド エコーの ON と OFF を切り替えます。\n\n  ECHO [ON | OFF]\n  ECHO [メッセージ]\n\n現在のエコー設定を表示するには、パラメータを指定せずに ECHO と入力して\nください。\n
EDLIN /// EDLIN を起動します。EDLIN はテキスト エディタで、ASCII ファイルを 1 行単位で作成および変更できるテキスト エディタです。 \n\nEDLIN は、メモリ上のテキスト ファイルの各行に番号を付けます。EDLIN を使用すると、ファイルで行を挿入、コピー、移動、および削除できます。\n\nEDLIN [drive:][path] filename [/b]\n\nパラメータ \n\n[drive:][path] filename\n\n        ディスク上の ASCII ファイルの位置と名前を指定します。ファイルが存在する\n        場合は、EDLIN によって開かれます。ファイルが存在しなければ、メモリ上で\n        ファイルが作成されます。EDLIN E (End) コマンドを使用すると、指定した位\n        置とファイル名を使用してディスク上でファイルが作成されます。 \n\n/b \n        EDLIN にファイル終了文字 (Ctrl + Z キー) を無視させる場合に指定します。\n
ENDLOCAL /// バッチ ファイルの環境変更のローカル化を終了します。\nENDLOCAL を実行した後で変更した環境設定はバッチ ファイル固有の設定で\nはありません。バッチ ファイルを終了しても前の設定は復元されません。\n\nENDLOCAL\n\nコマンド拡張機能を有効にすると、ENDLOCAL は次のように変更されます:\n\n対応する SETLOCAL が新しい ENABLEEXTENSIONS または DISABLEEXTENSIONS\nオプションを使ってコマンド拡張機能を有効または無効にしている場合は、\nENDLOCAL を実行した後、コマンド拡張機能の有効または無効の状態は対応\nする SETLOCAL コマンドを実行する前の状態に復元されます。\n
EXE2BIN /// .exe (実行可能) ファイルをバイナリ形式に変換します。 \n\nEXE2BIN は、システム開発者向けのサービスとして Windows 2000 に組み込まれています。一般のユーザーには有効ではありません。 \n\nEXE2BIN [drive1:][path1] input-file [[drive2:][path2] output-file] \n\nパラメータ\n\n[drive1:][path1] input-file \n\n        変換する入力ファイルの場所と名前を指定します。 \n\n[drive2:][path2] output-file \n\n        作成する出力ファイルの場所と名前を指定します。 \n
EXIT /// CMD.EXE プログラム (コマンド インタープリタ) またはバッチ スクリプトを終了\nします。\nEXIT [/B] [終了コード]\n  /B          CMD.EXE ではなく、現在のバッチ スクリプトを終了するように指定\n              します。バッチ スクリプトの外から実行された場合、CMD.EXE を終\n              了させます。\n  終了コード  数値を指定します。/B が指定されている場合、ERRORLEVEL にその\n              数値を設定します。CMD.EXE 終了をする場合、プロセス終了コードに\n              その数値を設定します。\n
EXPAND /// Microsoft (R) File Expansion Utility  Version 5.00.2134.1\nCopyright (C) Microsoft Corp 1990-1999.  All rights reserved.\n\n圧縮されたファイルを展開します。\n\nEXPAND [-r] 展開元 展開先\nEXPAND -r 展開元 [展開先]\nEXPAND -D CABファイル名 [-F:ファイル名]\nEXPAND CABファイル名 -F:ファイル名 展開先\n\n  -r            展開されたファイルの名前を変更します。\n  -D            展開元ファイルにあるファイルを一覧表示します。\n  展開元        展開元のファイルを指定します。ワイルドカードも使用できます。\n  -F:ファイル名 CAB ファイルから展開するファイルの名前を指定します。\n  展開先        展開先のファイルまたはパスを指定します。\n                展開先にはディレクトリも指定できます。\n                展開元ファイルが複数で、-r オプションが指定されていない\n                場合は、展開先はディレクトリである必要があります。\n
EXTRACT /// Microsoft (R) Cabinet Extraction Tool - Version (16) 1.00.603.0 (08/14/97)\nCopyright (c) Microsoft Corp 1994-1997. All rights reserved.\n\nEXTRACT [/Y] [/A] [/D | /E] [/L dir] cabinet [filename ...]\nEXTRACT [/Y] source [newname]\nEXTRACT [/Y] /C source destination\n\n  cabinet  - Cabinet file (contains two or more files).\n  filename - Name of the file to extract from the cabinet.\n             Wild cards and multiple filenames (separated by\n             blanks) may be used.\n\n  source   - Compressed file (a cabinet with only one file).\n  newname  - New filename to give the extracted file.\n             If not supplied, the original name is used.\n\n  /A         Process ALL cabinets.  Follows cabinet chain\n             starting in first cabinet mentioned.\n  /C         Copy source file to destination (to copy from DMF disks).\n  /D         Display cabinet directory (use with filename to avoid extract).\n  /E         Extract (use instead of *.* to extract all files).\n  /L dir     Location to place extracted files (default is current directory).\n  /Y         Do not prompt before overwriting an existing file.\n
FC /// 2 つのファイルまたはファイル セットを比較し、相違点を表示します。\n\nFC [/A] [/C] [/L] [/LBn] [/N] [/T] [/U] [/W] [/nnnn]\n   [ドライブ1:][パス1]ファイル名1 [ドライブ2:][パス2]ファイル名2\nFC /B [ドライブ1:][パス1]ファイル名1 [ドライブ2:][パス2]ファイル名2\n\n   /A     相違する各部分の 1 行目と最後の行だけを表示します。\n   /B     バイナリの比較を実行します。\n   /C     英字の大文字と小文字を区別しません。\n   /L     ファイルを ASCII テキストとして比較します。\n   /LBn   連続する最大不一致行を指定行数に設定します。\n   /N     ASCII の比較で行番号を表示します。\n   /T     タブをスペースに変換しません。\n   /U     Unicode テキスト ファイルとしてファイルを比較します。\n   /W     連続した空白 (タブとスペース) を 1 つのスペースに圧縮して比較します。\n   /nnnn  不一致発見後に確認する、一致すべき連続行数を指定します。\n\n
FIND /// ファイル (複数可) 内のテキスト文字列を検索します。\n\nFIND [/V] [/C] [/N] [/I] "文字列" [[ドライブ:][パス]ファイル名[...]]\n\n  /V        指定した文字列を含まない行をすべて表示します。\n  /C        指定した文字列を含む行の数だけを表示します。\n  /N        行番号を表示します。\n  /I        大文字と小文字の区別をしないで検索します。\n  "文字列"  検索する文字列を指定します。\n  [ドライブ:][パス]ファイル名\n            検索するファイル (複数可) を指定します。\n\nパスが指定されていないときは、プロンプトで入力されたテキストまた\nは別のコマンドからパイプ処理で渡されたテキストを検索します。\n
FINDSTR /// ファイルから文字列を検索します。\n\nFINDSTR [/B] [/E] [/L] [/R] [/S] [/I] [/X] [/V] [/N] [/M] [/O] [/P] [/F:ファイ\n        ル] [/C:文字列] [/G:ファイル] [/D:ディレクトリ一覧] [/A:色属性]\n        [文字列] [[ドライブ:][パス]ファイル名[ ...]]\n\n  /B           行の先頭にあるパターンを検索します。\n  /E           行の末尾にあるパターンを検索します。\n  /L           検索文字列をリテラルとして使用します。\n  /R           検索文字列を正規表現として使用します。\n  /S           現在のディレクトリとすべてのサブディレクトリから一致する\n               ファイルを検索します。\n  /I           検索するときに大文字と小文字を区別しません。\n  /X           完全に一致する行を出力します。\n  /V           一致しない行のみを出力します。\n  /N           一致する各行の前に行番号を出力します。\n  /M           ファイルに一致する行があるときに、ファイル名のみを出力します。\n  /O           一致する各行の前に文字オフセットを出力します。\n  /P           印刷不可能な文字を含むファイルをスキップします。\n  /A:属性      2 桁の 16 進数で色属性を指定します。"color /?" を参照してくだ\n               さい。\n  /F:ファイル  指定したファイルからファイル一覧を読み取ります (/ を指定する\n               とコンソール)。\n  /C:文字列    指定された文字列をリテラル検索文字列として使用します。\n  /G:ファイル  指定された文字列から検索文字列を取得します (/ を指定する\n               とコンソール)。\n  /D:ディレクトリ\n               セミコロンで区切られた検索されるディレクトリ文字列テキストの\n               一覧を検索します。\n  [ドライブ:][パス]ファイル名\n               検索するファイルを指定します。\n\n複数の文字列を検索する場合には、引数 /C を使わず、各文字列をスペースで区切ります。\nたとえば、FINDSTR "hello there" x.y と指定した場合は、ファイル x.y で "hello"\nまたは "there" が検索されます。\nこれに対して、FINDSTR /C:"hello there" x.y と指定した場合はファイル x.y で\n"hello there" が検索されます。\n\n正規表現クイック リファレンス:\n  .            ワイルドカード: 任意の文字\n  *            繰り返し: ゼロ個以上の直前の文字またはクラス\n  ^            行位置: 行頭\n  $            行位置: 行末\n  [class]      文字クラス: セットの任意の 1 文字\n  [^class]     逆クラス: セット以外の任意の 1 文字\n  [x-y]        範囲: 指定した範囲の任意の文字\n  \x           エスケープ: メタ文字 x のリテラル使用\n  \<xyz        単語位置: 単語の先頭\n  xyz\>        単語位置: 単語の終わり\n\nFINDSTR の詳細な正規表現に関しては、オンライン ヘルプのコマンド リファレンスを\n参照してください。\n\n
FOR,IN,DO /// 指定されたコマンドをファイル セットの各ファイルに対して実行します。\n\nFOR %変数 IN (セット) DO コマンド [コマンドパラメータ]\n\n  %変数     置き換え可能なパラメータを指定します。\n  (セット)  ファイル セットを指定します。ワイルドカードを使用できます。\n  コマンド  各ファイルごとに実行するコマンドを指定します。\n  コマンドパラメータ\n            指定されたコマンドのパラメータまたはスイッチを指定します。\n\nバッチ プログラムで FOR コマンドを使用するときは、%変数の代わりに、\n%%変数を使用してください。変数名では大文字と小文字が区別されるため、\n%i と %I は異なります。\n\nコマンド拡張機能を有効にすると、次の FOR コマンドの追加形式\nがサポートされるようになります:\n\nFOR /D %変数 IN (セット) DO コマンド [コマンドパラメータ]\n\n    セットがワイルドカードを含む場合は、ファイル名ではなくディレクトリ名\n    の一致を指定します。\n\nFOR /R [[ドライブ:]パス] %変数 IN (セット) DO コマンド [コマンドパラメータ]\n\n    [ドライブ:]パスから始めて、ツリーの各ディレクトリで FOR 文を実行し\n    ます。/R の後にディレクトリが指定されていない場合は、現在の\n    ディレクトリが使用されます。セットが単一のピリオド (.) である場合は、\n    ディレクトリ ツリーの列挙だけを行います。\n\n\nFOR /L %変数 IN (開始,ステップ,終了) DO コマンド [コマンドパラメータ]\n\n    セットは、ステップの量ごとに変化する開始から終了までの数列です。\n    たとえば、(1,1,5) は 1 2 3 4 5、(5,-1,1) は (5 4 3 2 1) という数列に\n    なります。\n\nFOR /F ["オプション"] %変数 IN (ファイル セット) DO コマンド\n       [コマンド パラメータ]\nFOR /F ["オプション"] %変数 IN ("文字列") DO コマンド [コマンド パラメータ]\nFOR /F ["オプション"] %変数 IN ('コマンド') DO コマンド [コマンド パラメータ]\n\n    または usebackq オプションの場合:\n\nFOR /F ["オプション"] %変数 IN (ファイル セット) DO コマンド\n       [コマンド パラメータ]\nFOR /F ["オプション"] %変数 IN ('文字列') DO コマンド [コマンド パラメータ]\nFOR /F ["オプション"] %変数 IN (`コマンド`) DO コマンド [コマンド パラメータ]\n\n    ファイル名セットは、1 つ以上のファイル名です。各ファイルが開かれ、読み\n    取られ、処理されてから、ファイル名セットの次のファイルに進みます。処理\n    には、ファイルの読み取り、個々のテキスト行への分割と、0 個以上のトークン\n    への解析が含まれます。その後、変数値を見つかったトークン文字列に設定して、\n    for ループの本体が呼び出されます。既定では、/F は、各ファイルの各行から、\n    空白で区切られた最初のトークンを渡します。空白行はスキップされます。既定\n    の解析動作を変更するには、オプションの "オプション" パラメータを指定しま\n    す。これは、異なる解析オプションを指定する 1 つ以上のキーワードを含む、\n    引用符で囲まれた文字列です。キーワードは、次のとおりです:\n\n        eol=c           - 行末のコメント文字を指定します (1 文字)。\n        skip=n          - ファイルの先頭でスキップする行数を指定します。\n        delims=xxx      - 区切り文字のセットを指定します。これは、既定の\n                          区切り文字であるスペースとタブを置き換えます。\n        tokens=x,y,m-n  - 各繰り返しに対して、各行から for 本体に渡すトー\n                          クンを指定します。これにより、追加の変数名が割り当\n                          てられます。m-n の形式は範囲で、m 番目から n 番目の\n                          トークンを指定します。tokens= 文字列の最後の文字が\n                          アスタリスクである場合は、追加の変数が割り当てられ、\n                          最後のトークンが解析された後、行に含まれている残り\n                          のテキストを受け取ります。\n        usebackq        - 次の新しい表示形式を指定します。逆引用符で囲まれた\n                          文字列がコマンドとして実行され、一重引用符で囲まれた\n                          文字列がリテラル文字列コマンドになりファイル名セット\n                          のファイル名を二重引用符で囲めるようになります。\n\n    例を参考にしてください:\n\nFOR /F "eol=; tokens=2,3* delims=, " %i in (myfile.txt) do @echo %i %j %k\n\n\n    この例は、myfile.txt の各行を解析します。セミコロンで始まる行を無視し、\n    各行の 2 番目と 3 番目のトークンを for 本体に渡します。トークンは、カンマ\n    またはスペースで区切られています。for 本体の文が %i で 2 番目のトークン\n    を、%j で 3 番目のトークンを取得し、%k で 3 番目移行のすべてのトークンを\n    取得していることに注意してください。スペースを含むファイル名に対しては、\n    二重引用符でファイル名を引用する必要があります。この方法で二重引用符を使う\n    ためには、usebackq オプションを使わなければなりません。使わなければ、二重\n    引用符はリテラル文字列の定義として解釈され、解析されます。\n\n    %i は for 文で明示的に宣言され、%j と %k は tokens= オプションで\n    暗黙的に宣言されています。tokens= 行を使って 26 個までのトークンを\n    指定できますが、文字 'z' または 'Z' よりも高い変数を宣言することは\n    できません。FOR 変数名は大文字と小文字を区別し、グローバルなもので\n    あり、一度にアクティブにできるのは合計 52 個までです。\n\n    また、カッコで囲んだファイル名セットを一重引用符で囲み、文字列にすることに\n    より、即時の文字列に対する FOR /F 解析ロジックを使うこともできます。\n    これは、ファイルからの単一入力行として処理されます。\n\n    最後に、FOR /F コマンドを使って、コマンド出力を解析することができます。\n    カッコの中のファイル名セットを逆引用符で囲みます。この文字列は、コマンド\n    ラインとして子 CMD.EXE に渡されます。出力はメモリにキャプチャされ、ファイ\n    ルのように解析されます。\n    例:\n\n      FOR /F "usebackq delims==" %i IN (`set`) DO @echo %i\n\n    この例は、現在の環境の環境変数名を列挙します。\n\nまた、FOR 変数参照の置換も拡張されました。\n次のオプション構文を使うことができます:\n\n    %~I         - すべての引用句 (") を削除して、I を展開します。\n    %~fI        - %I を完全修飾パス名に展開します。\n    %~dI        - %I をドライブ文字だけに展開します。\n    %~pI        - %I をパス名だけに展開します。\n    %~nI        - %I をファイル名だけに展開します。\n    %~xI        - %I をファイル拡張子だけに展開します。\n    %~sI        - 展開されたパスは短い名前だけを含みます。\n    %~aI        - %I をファイルの属性に展開します。\n    %~tI        - %I ファイルの日付/時刻に展開します。\n    %~zI        - %I ファイルのサイズに展開します。\n    %~$PATH:I   - PATH 環境変数に指定されているディレクトリを\n                  検索し、最初に見つかった完全修飾名に %I を\n                  展開します。\n                  環境変数名が定義されていない場合、または検索\n                  してもファイルが見つからなかった場合は、この\n                  修飾子を指定すると空の文字列に展開されます。\n\n修飾子を組み合わせて、複合結果を得ることもできます:\n\n    %~dpI       - %I をドライブ文字とパスだけに展開します。\n    %~nxI       - %I をファイル名と拡張子だけに展開します。\n    %~fsI       - %I を完全なパスと短い名前だけに展開します。\n    %~dp$PATH:i - PATH 環境変数に指定されているディレクトリを\n                  検索して %I を探し、最初に見つかったファイル\n                  のドライブ文字とパスだけに展開します。\n    %~ftzaI     - %I を DIR コマンドの出力行のように展開します。\n\n上の例の %I と PATH は、ほかの有効な値で置き換えることができます。\n%~ 構文は、有効な FOR 変数名によって区切られます。%I のような大\n文字の変数を使うと読み取りやすく、大文字と小文字を区別しない修飾子\nとの混乱を避けることができます。\n
FORMAT /// Windows 2000 で使うディスクをフォーマットします。\n\nFORMAT ボリューム: [/FS:ファイルシステム] [/V:ラベル] [/Q] [/A:サイズ] [/C][/X]\nFORMAT ボリューム: [/V:ラベル] [/Q] [/F:サイズ]\nFORMAT ボリューム: [/V:ラベル] [/Q] [/T:トラック数 /N:セクタ数]\nFORMAT ボリューム: [/V:ラベル] [/Q] [/1] [/4]\nFORMAT ボリューム: [/Q] [/1] [/4] [/8]\n\n  ボリューム      ドライブ文字 (文字の後にはコロンを付ける)、マウント\n                  ポイント、ボリューム名を指定します。\n  /FS:ファイルシステム\n                  ファイルシステムにはファイル システムの種類を指定します\n                  (FAT、FAT32、または NTFS)。\n  /V:ラベル       ボリューム ラベルを指定します。\n  /Q              クイック フォーマットを実行します。\n  /C              新しいボリューム上に作成されたファイルは、既定では、\n                  圧縮されます。\n  /X              必要であれば、最初にボリュームを強制的にマウントを解除\n                  します。ボリュームへ開かれているすべてのハンドルは、無効\n                  になります。\n  /A:サイズ       既定のアロケーション ユニット サイズを無効にします。\n                  一般的には、既定の設定を使用してください。\n                  NTFS は、512、1024、2048、4096、8192、16K、32K、64K を\n                  サポートします。\n                  FAT は、512、1024、2048、4096、8192、16K、32K、64K を\n                  サポートします\n                  (セクタ サイズが  512 バイトよりも大きい場合は 128K、 256K)。\n                  FAT32 は、512、1024、2048、4096、8192、16K、32K、64K を\n                  サポートします\n                  (セクタ サイズが  512 バイトよりも大きい場合は 128K、 256K)。\n\n                  FAT と FAT32 ファイル システムは、下記のボリュームの\n                  クラスタ数の制限に従います:\n\n                  FAT: クラスタ数 <= 65526\n                  FAT32: 65526 < クラスタ数 < 268435446\n\n                  指定されたクラスタ サイズを使用して、上記の要件に一致しない\n                  と判断した場合、フォーマットの処理を直ちに停止します。\n\n                  NTFS 圧縮は、4096 より大きいアロケーション ユニット サイズ\n                  に対してはサポートされません。\n  /F:サイズ       フォーマットするディスクのサイズ (160、180、320、360、\n                  640、720、1.2、1.23、1.44、2.88、または 20.8) を指定します。\n  /T:トラック数   ディスクの片面あたりのトラック数を指定します。\n  /N:セクタ数     トラックあたりのセクタ数を指定します。\n  /1              フロッピー ディスクの最初の面だけをフォーマットします。\n  /4              5.25 インチ 360K フロッピー ディスクを高密度ドライブで\n                  フォーマットします。\n  /8              トラックあたり 8 セクタでフォーマットします。\n
FTYPE /// ファイル拡張子の関連付けに使われるファイル タイプを表示または変更します。\n\nFTYPE [ファイルタイプ[=[オープンコマンド文字列]]]\n\n  ファイルタイプ          表示または変更するファイル タイプを指定します。\n  オープンコマンド文字列  このタイプのファイルを開くために使うコマンドを\n                          指定します。\n\nパラメータを指定しないで FTYPE と入力すると、オープン コマンド文字列\nが定義されている現在のファイル タイプを表示します。ファイル タイプ\nだけを指定して FTYPE を実行すると、そのファイル タイプの現在のオープン\nコマンド文字列を表示します。オープン コマンド文字列に何も指定しない\nと、そのファイル タイプのオープン コマンド文字列を削除します。\nオープン コマンド内の %0 または %1 は、関連付けを使って開かれる\nファイル名で置き換えられます。%* はすべてのパラメータを取得し、\n%2 は第 1 パラメータ、%3 は第 2 パラメータを取得します。%~n は、\n第 n パラメータから最後までのパラメータを取得します。n は、2 から 9\n値です。たとえば、\n\n    ASSOC .pl=PerlScript\n    FTYPE PerlScript=perl.exe %1 %*\n\nと入力すると、次のように Perl スクリプトが起動されます。\n\n    script.pl 1 2 3\n\n次のようにすると、拡張子を入力する必要がなくなります。\n\n    set PATHEXT=.pl;%PATHEXT%\n\nスクリプトは、次のようにして起動できるようになります。\n\n    script 1 2 3\n
GOTO /// バッチ プログラム内の、ラベルで指定されている行へ制御を移動します。\n\nGOTO ラベル\n\n  ラベル   バッチ プログラムでラベルとして使用するテキスト文字列を指定します。\n\nラベルの先頭には : (コロン) を指定し、ラベルだけを単独で 1 行に入力してくだ\nさい。\n\nコマンド拡張機能を有効にすると、GOTO は次のように変更されます:\n\nGOTO コマンドにターゲット ラベルとして :EOF を指定し、現在のバッチ\nスクリプト ファイルの最後に制御を移すことができるようになります。\nラベルを定義しないでバッチ スクリプト ファイルを終了するには、この方法\nが簡単です。この機能を実用化する CALL コマンドの拡張機能の説明について\nは、CALL /? と入力してください。\n
GRAFTABL /// Windows がグラフィック モードで拡張文字セットを表示\nできるようにします。\n\nGRAFTABL [xxx]\nGRAFTABL /STATUS\n\n   xxx      コード ページ番号を指定します。\n   /STATUS  GRAFTABL のために現在選択されているコード ページを表示します。\n
HELP /// Windows 2000 のコマンドに関するヘルプ情報を表示します。\n\nHELP [コマンド]\n\n    コマンド - 指定したコマンドのヘルプ情報を表示します。\n\n
IF,ERRORLEVEL,EXIST /// バッチ プログラム中で条件処理を実行します。\n\nIF [NOT] ERRORLEVEL 番号 コマンド\nIF [NOT] 文字列1==文字列2 コマンド\nIF [NOT] EXIST ファイル名 コマンド\n\n  NOT               条件が偽の場合にだけ、Windows 2000 がコマンドを実行する\n                    ことを指定します。\n\n  ERRORLEVEL 番号   最後のプログラムの実行で指定された番号以上の終了コード\n                    が返されたときに、条件が真になるように指定します。\n\n  文字列1==文字列2  テキスト文字列が一致するときに条件が真になるように指定\n                    します。\n\n  EXIST ファイル名  指定したファイル名が存在するときに条件が真になるように\n                    指定します。\n\n  コマンド          条件が真のときに実行するコマンドを指定します。コマンドに\n                    続けて、ELSE キーワードの後、指定した条件が偽の場合に\n                    実行される ELSE コマンドを指定することができます。\n\nELSE 節は、IF の後のコマンドと同じ行に置きます。\n例:\n\n    IF EXIST filename. (\n        del filename.\n    ) ELSE (\n        echo filename. missing.\n    )\n\ndel コマンドは、改行で終了しなければならないため、次の例は、正しく動作し\nません:\n\n    IF EXIST filename. del filename. ELSE echo filename. missing\n\nELSE コマンドは、IF コマンドの終わりと同じ行で始まらなければならないため、\n次の例は正しく動作しません:\n\n    IF EXIST filename. del filename.\n    ELSE echo filename. missing\n\n次の例のように、すべてのコマンドを 1 行にすれば正しく動作します:\n\n    IF EXIST filename. (del filename.) ELSE echo filename. missing\n\nコマンド拡張機能を有効にすると、IF は次のように変更されます:\n\n    IF [/I] 文字列1 比較演算子 文字列2 コマンド\n    IF CMDEXTVERSION 番号 コマンド\n    IF DEFINED 変数 コマンド\n\n比較演算子は、次のいずれかです:\n\n    EQU - 等しい\n    NEQ - 等しくない\n    LSS - より小さい\n    LEQ - 以下\n    GTR - より大きい\n    GEQ - 以上\n\n/I スイッチを指定すると、文字列は、大文字と小文字を区別せずに比較され\nます。/I スイッチは、IF の 文字列1==文字列2 形式で使うこともできます。\nこの比較は汎用であり、文字列1 と 文字列2 が両方とも数字だけを含む場合\nは、文字列が数値に変換され、数値の比較が行われます。\n\nCMDEXTVERSION 条件は ERRORLEVEL と同様に動作しますが、コマンド拡張機能\nに関連付けられている内部バージョン番号との比較を行います。最初のバー\nジョンは 1 です。コマンド拡張機能に重要な拡張が追加された場合は、値が\n1 大きくなります。コマンド拡張機能が無効である場合は、CMDEXTVERSION は\n条件は常に偽です。\n\nDEFINED 条件は EXISTS と同様に動作しますが、環境変数名を受け取って、環境\n変数が定義されている場合は真を返します。\n\n%ERRORLEVEL% は、ERRORLEVEL の現在の値の文字列表記に展開されます。\nただし、ERRORLEVEL という名前の環境変数が既に定義されている場合は、その\n環境変数の値が取得されます。プログラム実行後、次の例が ERRORLEVEL の使い方\nを説明しています:\n\n    goto answer%ERRORLEVEL%\n    :answer0\n    echo Program had return code 0\n    :answer1\n    echo Program had return code 1\n\nまた、上の数値比較を使うこともできます:\n\n    IF %ERRORLEVEL% LEQ 1 goto okay\n\n%CMDCMDLINE% は、CMD.EXE が処理する前の、CMD.EXE に渡されたオリジナル\nのコマンド ラインに展開されます。ただし、CMDCMDLINE という名前の環境変数\nが既に定義されている場合は、その環境変数の値が取得されます。\n\n%CMDEXTVERSION% は、CMDEXTVERSION の現在の値の文字列表記に展開されます。\nただし、CMDEXTVERSION という名前の環境変数が既に定義されている場合は、その\n環境変数の値が取得されます。
INSTALL /// メモリにメモリ常駐プログラムを読み込みます。インストールするプログラムを指定するには、systemroot\System32\Config.nt ファイルを使うか、またはプログラムの PIF で指定された同等の起動ファイルを使います。\n\nINSTALL=[drive:][path] filename [command-parameters]\n\nパラメータ\n\n[drive:][path] filename\n\n        実行したいメモリ常駐プログラムの場所と名前を指定します。\n\ncommand-parameters \n\n        filename を指定するプログラム用のパラメータを指定します。\n
IPCONFIG /// Windows 2000 IP Configuration\n\nUSAGE:\n   ipconfig [/? | /all | /release [adapter] | /renew [adapter]\n            | /flushdns | /registerdns\n            | /showclassid adapter\n            | /setclassid adapter [classidtoset] ]\n\n   adapter    Full name or pattern with '*' and '?' to 'match',\n              * matches any character, ? matches one character.\n   Options\n       /?           Display this help message.\n       /all         Display full configuration information.\n       /release     Release the IP address for the specified adapter.\n       /renew       Renew the IP address for the specified adapter.\n       /flushdns    Purges the DNS Resolver cache.\n       /registerdns Refreshes all DHCP leases and re-registers DNS names\n       /displaydns  Display the contents of the DNS Resolver Cache.\n       /showclassid Displays all the dhcp class IDs allowed for adapter.\n       /setclassid  Modifies the dhcp class id.\n\nThe default is to display only the IP address, subnet mask and\ndefault gateway for each adapter bound to TCP/IP.\n\nFor Release and Renew, if no adapter name is specified, then the IP address\nleases for all adapters bound to TCP/IP will be released or renewed.\n\nFor SetClassID, if no class id is specified, then the classid is removed.\n\nExamples:\n    > ipconfig                       ... Show information.\n    > ipconfig /all                  ... Show detailed information\n    > ipconfig /renew                ... renew all adapaters\n    > ipconfig /renew EL*            ... renew adapters named EL....\n    > ipconfig /release *ELINK?21*   ... release all matching adapters,\n                                         eg. ELINK-21, myELELINKi21adapter.\n
JVIEW /// Microsoft (R) Command-line Loader for Java Version 5.00.3810\nCopyright (C) Microsoft Corp 1996-2000. All rights reserved.\n\n使用法 : JView [オプション] <クラス名> [引数]\n\nオプション :\n    /?                 使用方法を表示します\n    /cp <クラスパス>   クラスパスを設定します\n    /cp:p <パス>       クラスパスの前にパスを追加します\n    /cp:a <パス>       パスをクラスパスに追加します\n    /n <名前空間>      実行する名前空間\n    /p                 エラーが発生した場合、終了する前に一時停止します\n    /v                 すべてのクラスを確認します\n    /d:<名前>=<値>     システム プロパティを定義します\n\n    /a                 AppletViewer を実行します\n\nクラス名 :\n    実行する .CLASS ファイル\n\n引数 :\n    クラス ファイルに渡されるコマンド ラインの引数\n\n
LABEL /// ディスクのボリューム ラベルを作成、変更、または削除します。\n\nLABEL [ドライブ:][ラベル]\nLABEL [/MP] [ボリューム] [ラベル]\n\n  ドライブ:       ドライブのドライブ文字を指定します。\n  ラベル          ボリュームのラベルを指定します。\n  /MP             マウント ポイントまたはボリューム名として処理される\n                  ボリュームを指定します。\n  ボリューム      ドライブ文字 (文字の後にはコロンを付ける)、マウント\n                  ポイント、ボリューム名を指定します。指定されている\n                  場合は、/MP フラグは不要です。\n
LOADHIGH,LH /// プログラムをアッパー メモリ領域 (UMA) に読み込みます。プログラムを UMA に読み込むと、メイン メモリに残るほかのプログラム用の領域が大きくなります。UMA に読み込むプログラムを指定するには、systemroot\System32\Config.nt ファイルを使うか、またはプログラムの PIF で指定された同等の起動ファイルを使います。\n\nLOADHIGH [drive:][path] filename [parameters]\nLH [drive:][path] filename [parameters]\n\nパラメータ \n\n[drive:][path] filename \n\n        読み込むプログラムの場所と名前を指定します。 \n\nparameters\n\n        プログラムに必要なコマンド ライン情報を指定します。 \n
MKDIR,MD /// ディレクトリを作成します。\n\nMKDIR [ドライブ:]パス\nMD [ドライブ:]パス\n\nコマンド拡張機能を有効にすると、MKDIR は次のように変更されます:\n\nMKDIR は、必要に応じてパスの中間ディレクトリを作成します。\nたとえば、\a が存在しない場合、\n\n    mkdir \a\b\c\d\n\nは、次と同じです:\n\n    mkdir \a\n    chdir \a\n    mkdir b\n    chdir b\n    mkdir c\n    chdir c\n    mkdir d\n\n拡張機能が無効な場合は、上のように入力します。\n
MODE /// システム デバイスを設定します。\n\nシリアル ポート:   MODE COMm[:] [BAUD=b] [PARITY=p] [DATA=d] [STOP=s]\n                                [to=on|off] [xon=on|off] [odsr=on|off]\n                                [octs=on|off] [dtr=on|off|hs]\n                                [rts=on|off|hs|tg] [idsr=on|off]\n\nデバイス状態:      MODE [デバイス] [/STATUS]\n\nリダイレクト印刷:  MODE LPTn[:]=COMm[:]\n\nコード ページ選択: MODE CON[:] CP SELECT=yyy\n\nコード ページ状態: MODE CON[:] CP [/STATUS]\n\n表示モード:        MODE CON[:] [COLS=c] [LINES=n]\n\nキーボード速度:    MODE CON[:] [RATE=r DELAY=d]\n
MORE /// 出力を一度に 1 画面ずつ表示します。\n\nMORE [/E [/C] [/P] [/S] [/Tn] [+n]] < [ドライブ:][パス]ファイル名\nコマンド名 | MORE [/E [/C] [/P] [/S] [/Tn] [+n]]\nMORE /E [/C] [/P] [/S] [/Tn] [+n] [ファイル]\n\n    [ドライブ:][パス]ファイル名\n            一度に 1 画面ずつ表示するファイルを指定します。\n\n    コマンド名\n            出力を表示するコマンドを指定します。\n\n    /E      拡張機能を有効にします。\n    /C      ページを表示する前に画面を消去します。\n    /P      フォーム フィード文字を展開します。\n    /S      複数の空白行を 1 行に縮小します。\n    /Tn     タブを n 個のスペースに置き換えます (既定値は 8 です)。\n\n            スイッチは MORE の環境変数として設定することが可能です。\n\n    +n      最初のファイルを n 行目から表示します。\n\n    ファイル\n            表示するファイルの一覧を指定します。ファイル名はスペースで\n            区切ってください。\n\n    拡張機能が利用できる場合、-- More -- プロンプトで以下のコマンドを\n    使用できます。\n\n    P n     次の n 行を表示します。\n    S n     次の n 行をスキップします。\n    F       次のファイルを表示します。\n    Q       終了します。\n    =       行番号を表示します。\n    ?       ヘルプを表示します。\n    <space> 次ページを表示します。\n    <ret>   次の行を表示します。\n
MOVE /// ファイルを移動およびファイルとディレクトリ名を変更します。\n\n複数のファイルを移動するには:\nMOVE [/Y | /-Y] [ドライブ:][パス]ファイル名1[,...] 受け側\n\nディレクトリ名を変更するには:\nMOVE [/Y | /-Y] [ドライブ:][パス]ディレクトリ名1 ディレクトリ名2\n\n  [ドライブ:][パス]ファイル名1\n                          移動するファイルの場所と名前を指定します。\n  受け側                  ファイルの新しい場所を指定します。移動先はドライブ\n                          名とコロン、ディレクトリ名、または組み合わせから成\n                          ります。1 つのファイルだけを移動する場合で、その\n                          ファイルを移動するときに名前を変更する場合、ファ\n                          イル名を指定できます。\n  [ドライブ:][パス]ディレクトリ名1\n                          変更するディレクトリ名を指定します。\n  ディレクトリ名2         新しいディレクトリ名を指定します。\n  /Y                      移動先の既存のファイルを上書きする前に確認のメッ\n                          セージを表示しません。\n  /-Y                     移動先の既存のファイルを上書きする前に確認のメッ\n                          セージを表示します。\n\n環境変数 COPYCMD にスイッチ /Y を設定できます。これは、コマンド ラインの /-Y\nで無効になります。既定では、COPY コマンドがバッチ スクリプトから実行され\nていない場合、上書きを確認します。\n
MSIMEKEY /// 機能  ＭＳ ＩＭＥのキー定義を変更・設定します.\n\n書式  MSIMEKEY [環境ファイル名 [/n] ] [/?]\n\n      なし        : インストールされているＭＳ ＩＭＥのキー定義を読み込み,\n                  設定画面を表示します.\n        ・ＭＳ ＩＭＥがインストールされていない場合は, 初期定義を表示します.\n      環境ファイル名: 指定の環境ファイルを読み込み, 設定画面を表示します.\n      /n          : 画面出力を行いません.\n      /?          : このヘルプ画面を表示します.
MSIMELST /// 機能  国語辞書の単語一覧を表示し, スクリーン上で単語削除を行います.\n\n書式  MSIMELST [辞書名] [/l一覧ファイル名] [/d削除ログファイル名] [/?]\n\n      なし        : 単語一覧・削除の条件設定画面を表示します.\n      /l一覧ファイル名    : 単語一覧の結果を出力するファイル名を指定します.\n      /d削除ログファイル名: 単語削除の結果を出力するファイル名を指定します.\n      /?          : このヘルプ画面を表示します.\n
MSIMERGN /// 機能  国語辞書の再編成を行います.\n\n書式  MSIMERGN [入力辞書名] [出力辞書名] [/w作業パス名] [/k格納率]\n             [/d削除レベル] [/n] [/x] [/?]\n\n      なし        : 辞書の再編成の条件設定画面が表示されます.\n\n      入力辞書名  : 再編成に使用する辞書名を指定します.\n      出力辞書名  : 再編成の結果を出力する辞書名を指定します.\n      /w作業パス名: 再編成作業に使用される領域を指定します.\n      /k格納率    : 格納率を指定します. （省略時は８０％）\n      /d削除レベル: 削除レベルに従って再編成時に学習単語を削除します.\n        ・無指定の場合は, 削除を行いません.\n        ・削除レベル  1  : 文節学習結果を削除します.\n                      3  : 文節学習結果および学習単語を削除します.\n      /n          : 画面表示を行いません.\n      /x          : 入力辞書を削除し, 空き領域を作業に使用します.\n      /?          : このヘルプ画面を表示します.
MSIMESET /// 機能  ＭＳ ＩＭＥの環境設定を行います.\n\n書式  MSIMESET [/n] [入力ファイル名 [出力ファイル名] ] [/?]\n\n      なし        : カレントドライブの config.sys を読み込み, ＭＳ ＩＭＥの\n                  環境設定画面を表示します.\n      /n          : 現在のＭＳ ＩＭＥの設定を変更するだけで設定ファイルの\n                  内容は書き換えません.\n      入力ファイル名: 指定されたファイルの環境設定内容を画面に表示します.\n      出力ファイル名: 出力時に, 指定されたファイルへ設定内容を書き込みます.\n      /?          : このヘルプ画面を表示します.
NLSFUNC /// 国別情報を読み込みます.\n\nNLSFUNC [[ﾄﾞﾗｲﾌﾞ:][ﾊﾟｽ]ﾌｧｲﾙ名]\n\n  [ﾄﾞﾗｲﾌﾞ:][ﾊﾟｽ]ﾌｧｲﾙ名\n     国別情報を含んだファイルを指定します.\n
PATH /// 実行可能ファイルの検索パスを表示または設定します。\n\nPATH [[ドライブ:]パス[;...][;%PATH%]]\nPATH ;\n\nパラメータとして ; (セミコロン) だけを指定すると、すべての検索パスは\nクリアされて現在のディレクトリだけが検索されます。\nパラメータの指定がなければ、現在のパスが表示されます。\n新しいパス設定に %PATH% を指定すると、前のパスが新しい設定に追加されます。\n
PAUSE /// バッチ プログラムの処理を一時停止し、\n"続行するには何かキーを押してください . . ."\nというメッセージを表示します。 
PING /// Usage: ping [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS]\n            [-r count] [-s count] [[-j host-list] | [-k host-list]]\n            [-w timeout] destination-list\n\nOptions:\n    -t             Ping the specified host until stopped.\n                   To see statistics and continue - type Control-Break;\n                   To stop - type Control-C.\n    -a             Resolve addresses to hostnames.\n    -n count       Number of echo requests to send.\n    -l size        Send buffer size.\n    -f             Set Don't Fragment flag in packet.\n    -i TTL         Time To Live.\n    -v TOS         Type Of Service.\n    -r count       Record route for count hops.\n    -s count       Timestamp for count hops.\n    -j host-list   Loose source route along host-list.\n    -k host-list   Strict source route along host-list.\n    -w timeout     Timeout in milliseconds to wait for each reply.\n\n
POPD /// PUSHD コマンドで記憶されたディレクトリに変更します。\n\nPOPD\n\n\nコマンド拡張機能を有効にすると、POPD コマンドは、プッシュされている\nディレクトリ スタックからドライブを POPD するときに、PUSHD が作成した\n一時的なドライブ文字を削除します。\n
PRINT /// テキスト ファイルを印刷します。\n\nPRINT [/D:デバイス] [[ドライブ:][パス]ファイル名[...]]\n\n   /D:デバイス   印刷デバイスを指定します。\n\n
PROMPT /// cmd.exe のコマンド プロンプトを変更します。\n\nPROMPT [文字列]\n\n  文字列    新しいコマンド プロンプトを指定します。\n\nPROMPT には通常の文字と次に示す特殊コードを使用できます:\n\n  $A   & (アンパサンド)\n  $B   | (パイプ)\n  $C   ( (左かっこ)\n  $D   現在の日付\n  $E   エスケープ コード (ASCII コードの 27)\n  $F   ) (右かっこ)\n  $G   > (不等号 (より大))\n  $H   バックスペース (直前の文字を削除します)\n  $L   < (不等号 (より小))\n  $N   現在のドライブ\n  $P   現在のドライブとパス\n  $Q   = (等号)\n  $S     (空白)\n  $T   現在の時刻\n  $V   Windows 2000 のバージョン番号\n  $_   キャリッジ リターンとラインフィード\n  $$   $ (ドル記号)\n\nコマンド拡張機能を有効にすると、PROMPT コマンドは、次の追加の書式\n文字をサポートするようになります:\n\n  $+   PUSHD ディレクトリ スタックの深さに応じて、0 個以上のプラス\n       記号 (+) を指定します。1 個のプラス記号が、プッシュされた\n       1 レベルを表します。\n\n  $M   現在のドライブ文字に関連付けられているリモート名を表示します。\n       現在のドライブがネットワーク ドライブでない場合は、空の文字列\n       を表示します。\n
PUSHD /// POPD コマンドで使用するために現在のディレクトリを保存し、\n指定したディレクトリに変更します。\n\nPUSHD [パス | ..]\n\n  パス        現在のディレクトリとして設定するディレクトリを指定します。\n\nコマンド拡張機能を有効にすると、PUSHD コマンドは、通常のドライブ文字\nとパスだけでなくネットワーク パスも受け付けるようになります。\nネットワーク パスを指定した場合は、PUSHD は指定されたネットワーク\nリソースを指し示す一時的なドライブ文字を作成し、新しく定義されたドライブ\n文字を使って現在のドライブとディレクトリを変更します。一時的なドライ\nブ文字は、Z: から前へ順に、最初に見つかった未使用のドライブ文字が\n割り当てられます。\n
RECOVER /// 不良または欠陥ディスクから読み取り可能なデータを回復します。\n\nRECOVER [ドライブ:][パス]ファイル名\nRECOVER コマンドを使用する前に、Windows 2000 ヘルプのオンライン コマンド\nリファレンスを参照してください。\n
REM /// バッチ ファイルまたは CONFIG.SYS にコメント (注釈) を記録します。\n\nREM [コメント]\n
RENAME,REN /// ファイル (複数可) の名前を変更します。\n\nRENAME [ドライブ:][パス]ファイル名1 ファイル名2\nREN [ドライブ:][パス]ファイル名1 ファイル名2\n\nファイル名2 には新しいドライブもパスも指定できないので注意してください。\n
REPLACE /// ファイルを置き換えます (更新)。\n\nREPLACE [ドライブ1:][パス1]ファイル名 [ドライブ2:][パス2] [/A] [/P] [/R] [/W]\nREPLACE [ドライブ1:][パス1]ファイル名 [ドライブ2:][パス2] [/P] [/R] [/S] [/W]\n  [/U]\n\n  [ドライブ1:][パス1]ファイル名\n                          置き換える送り側ファイル (複数可) を指定します。\n  [ドライブ2:][パス2]     置き換えられるファイルのある受け側のディレクトリを\n                          指定します。\n  /A                      新しいファイルを受け側のディレクトリに追加します。\n                          /S または /U とは同時に使用できません。\n  /P                      ファイルの置き換えや追加をする前に確認するための\n                          プロンプトを表示します。\n  /R                      読み取り専用のファイルも置き換えます。\n  /S                      受け側ディレクトリのすべてのサブディレクトリの\n                          ファイルを置き換えます。\n                          /A と同時には使用できません。\n  /W                      始める前にディスクの挿入を待ちます。\n  /U                      送り側ファイルよりも古いファイルのみを\n                          置き換え (更新) ます。\n                          /A と同時には使用できません。\n
RMDIR,RD /// ディレクトリを削除します。\n\nRMDIR [/S] [/Q] [ドライブ:]パス\nRD [/S] [/Q] [ドライブ:]パス\n\n    /S      指定されたディレクトリに加えて、そのディレクトリ内のすべての\n            ディレクトリとファイルを削除します。ディレクトリ ツリーを削除\n            するときに使用します。\n\n    /Q      /S を指定してディレクトリ ツリーを削除するときに、確認の\n            メッセージを表示しません。(QUIET モード)\n
SET /// cmd.exe 環境変数を表示、設定、または削除します。\n\nSET [変数名=[文字列]]\n\n  変数名   環境変数名を指定します。\n  文字列   変数に割り当てる文字列を指定します。\n\n現在の環境変数を表示するには、パラメータを指定せずに SET と入力してください。\n\nコマンド拡張機能を有効にすると、SET は、次のように変更されます:\n\n等号や値を指定せずに、変数名だけを指定して SET コマンドを実行すると、\nSET コマンドに指定された名前に接頭辞が一致するすべての変数の値が\n表示されます。たとえば、\n\n    SET P\n\nと入力すると、文字 'P' で始まるすべての変数が表示されます。\n\n変数名が現在の環境に見つからない場合は、SET コマンドは、ERRORLEVEL を\n1 に設定します。\n\nSET コマンドでは、変数の名前に等符号を使用することはできません。\n\nSET コマンドには、2 つの新しいスイッチが追加されています:\n\n    SET /A 式\n    SET /P 変数=[プロンプト文字列]\n\n/A スイッチは、等号の右側の文字列が、評価すべき数式であることを\n指定します。式の評価はごく単純で、次の操作がサポートされます。\n操作は、優先順位の高い順に示されています:\n\n    ()                  - グループ化\n    * / %               - 算術演算子\n    + -                - 算術演算子\n    << >>               - 論理シフト\n    &                   - ビット演算子 AND\n    ^                   - ビット演算子排他的 OR\n    |                   - ビット演算子 OR\n    = *= /= %= += -=   - 代入\n      &= ^= |= <<= >>=\n    ,                   - 式の区切り記号\n\n論理演算子またはモジュール演算子を使う場合は、式文字列を引用符で\n囲む必要があります。式内の数値以外の文字列は環境変数文字列として\n処理され、使用される前に数値に変換されます。指定された環境変数名が\n現在の環境で定義されていない場合は、値として 0 が使用されます。\nこれにより、いくつもの % 記号を入力して値を取得しないでも、環境\n変数の値を算術演算に使うことができます。\nコマンド スクリプト外でコマンド ラインから SET /A を実行すると、式の\n最終的な値が表示されます。割り当て演算子を使うには、割り当て演算子\nの左側に環境変数名が必要です。数値は 10 進数ですが、接頭辞として 0x\nを付けると 16 進数、0 を付けると 8 進数になります。従って、0x12 は 18、\nあるいは 022 と同じです。8 進表記を使う場合は、注意してください。08 や\n09 は、8 と 9 が有効な 8 進数ではないため、有効な数値ではありません。\n\n/P はユーザーによって入力された入力行を変数の値として設定できるようにします。\n入力行を読み取る前に、指定されたプロンプト文字列を表示します。プロンプト文\n字列は空でもかまいません。\n\n環境変数の置換は、次のように拡張されます:\n\n    %PATH:文字列1=文字列2%\n\nは、PATH 環境変数を展開し、その結果に含まれるすべての "文字列1" を\n"文字列2" に置き換えます。"文字列2" に空の文字列を指定すると、展開\nされた出力からすべての "文字列1" を削除することができます。"文字列1"\nをアスタリスクで始め、展開された出力の先頭から、文字列1 の残りの部分\nが最初に現れるまでのすべてを一致させることもできます。\n\nまた、展開の副文字列を指定することもできます。\n\n    %PATH:~10,5%\n\nは、PATH 環境変数を展開し、展開結果の 11 番目 (オフセット 10) の文字\nから始まる 5 文字だけを使います。長さが指定されなかった場合は、変数の\n値の残りの長さを既定値とします。オフセットまたは長さのどちらかが負の値\nの場合、環境変数の値の長さに指定されたオフセットまたは長さを足してその\n数を使います。\n\n    %PATH:~-10%\n\nは、パス変数の最後の10 文字が展開されます。\n\n    %PATH:~0,-2%\n\nは最後の 2 文字以外のすべてが展開されます。\n\n最後に、遅延環境変数の展開が追加されました。このサポートは常に既定で\n無効になっていますが、CMD.EXE の /V: のコマンド ライン スイッチを使\nって有効または無効にできます。CMD /? を参照してください。\n\n遅延環境変数の展開は、実行時ではなく、テキスト行を読み取るときに展開\nされるという現在の制限を避けるために役立ちます。\n次の例は即時変数展開の問題を説明しています。\n\n    set VAR=before\n    if "%VAR%" == "before" (\n        set VAR=after;\n        if "%VAR%" == "after" @echo If you see this, it worked\n    )\n\nこの例は、論理的には IF 文が別の IF 文の本体に含まれる複合文なので、\n両方の IF 文の %VAR% が、最初の IF 文を読み取ったときに展開されます。\nこのため、メッセージは決して表示されません。複合分の中の IF では "before"\nと "after" が比較され、決して等しくはなりません。同様に次の例も期待し\nたようには動作しません。\n\n    set LIST=\n    for %i in (*) do set LIST=%LIST% %i\n    echo %LIST%\n\nこの例では、現在のディレクトリのファイルの一覧は作成されず、代わりに最後\nに見つけられたファイルが LIST 変数に設定されます。これは %LIST% が FOR 文\nが読み取られるとき、一度だけ展開され、そのときは LIST 変数は、空だからです。\nつまり、実際に実行されている FOR ループは\n\n    for %i in (*) do set LIST= %i\n\nで、LIST に最後にみつけられたファイルを設定し続けているだけです。\n\n遅延環境変数の展開では、実行時に環境変数を展開するために異なった文字\n(感嘆符)を使うことができます。遅延環境変数の展開が有効な場合、上記の\n例は次のように書くと意図したように動作します。\n\n    set VAR=before\n    if "%VAR%" == "before" (\n        set VAR=after\n        if "!VAR!" == "after" @echo If you see this, it worked\n    )\n\n    set LIST=\n    for %i in (*) do set LIST=!LIST! %i\n    echo %LIST%\n\nコマンド拡張機能が有効な場合、SET によって表示される変数の一覧には\n現れないいくつかの動的な環境変数があります。これらの変数の値は、変数の\n値が展開されるときに動的に計算されます。ユーザーがこれらの名前の変数を\n明示的に定義する場合、その定義は下記の動的な定義を無効にします。\n\n%CD% - 現在のディレクトリ文字列に展開します。\n\n%DATE% - DATE コマンドと同じフォーマットで現在の日付に展開します。\n\n%TIME% - TIME コマンドと同じフォーマットで現在の時刻に展開します。\n\n%RANDOM% - 0 から 32767 の間の任意の 10 進数に展開します\n\n%ERRORLEVEL% - 現在の ERRORLEVEL の値に展開します。\n\n%CMDEXTVERSION% - 現在のコマンド プロセッサ拡張機能のバージョン番号に\n                     展開します。\n\n%CMDCMDLINE% - コマンド プロセッサを起動したオリジナル コマンドライン\n                 に展開します。\n
SETLOCAL /// バッチ ファイルで環境変更のローカライズを開始します。SETLOCAL を実行した後で\n変更した環境設定は、そのバッチ ファイルだけで有効です。前の設定を復元するときは\nENDLOCAL を実行しなければなりません。バッチ スクリプトの終わりに達したとき、\n暗示的な ENDLOCAL が、そのバッチ スクリプトによって発行されたすべての未完了の\nSETLOCAL コマンドのために実行されます。\n\nSETLOCAL\n\nコマンド拡張機能を有効にすると、SETLOCAL は次のように変更されます:\n\nSETLOCAL バッチ コマンドは、オプション引数を受け取ることができます:\n        ENABLEEXTENSIONS / DISABLEEXTENSIONS\n            は、コマンド処理機能を有効または無効にできます。詳細に\n            ついては、CMD /? を参照してください。\n        ENABLEDELAYEDEXPANSION / DISABLEDELAYEDEXPANSION\n            は、遅延環境変数の展開を有効または無効にできます。詳細\n            については、CMD /? を参照してください。\nこれらの変更は、SETLOCAL コマンドの実行前の設定にかかわらず、対応する\nENDLOCAL コマンドを実行するまで継続されます。\n\nSETLOCAL コマンドに引数を指定すると、ERRORLEVEL の値が設定されます。\n2 つの有効な引数が指定された場合は 0、そうでない場合は 1 になります。\nこの機能をバッチ スクリプトで使って、拡張機能が利用可能かどうかを判断\nすることができます。それには、次のように入力します:\n\n    VERIFY OTHER 2>nul\n    SETLOCAL ENABLEEXTENSIONS\n    IF ERRORLEVEL 1 echo 拡張機能を有効にできません\n\nこの方法が使えるのは、古いバージョンの CMD.EXE では、SETLOCAL は\nERRORLEVEL の値を設定しないためです。VERIFY コマンドに誤った引数を\n指定すると、ERRORLEVEL の値は 0 以外の値に初期化されます。\n
SHIFT /// バッチ ファイル中の置き換え可能なパラメータの位置を変更します。\n\nSHIFT [/n]\n\nコマンド拡張機能を有効にすると、SHIFT コマンドは、/n スイッチをサポート\nするようになります。このスイッチを指定すると、コマンドはシフトを n 番\n目の引数から開始します。n は、0 から 8 までの数です。たとえば、\n\n    SHIFT /2\n\nは、%3 を %2に、%4 を %3 にシフトし、%0 と %1 はシフトしません。\n
SORT /// SORT [/R] [/+n] [/M KB] [/L ロケール] [/RE レコードバイト]\n  [[ドライブ1:][パス1]ファイル名1] [/T [ドライブ2:][パス2]]\n  [/O [ドライブ3:][パス3]ファイル名3]\n  /+n                         各行の比較を始める文字番号 n を指定します。\n                              /+3 は、各行の 3 番目の文字から比較を始める\n                              ことを意味します。n 文字より少ない行は、ほかの\n                              行より前に照合されます。\n                              既定では、比較はそれぞれの行の最初から始め\n                              ます。\n  /L[OCALE] ロケール          指定されたロケールでシステム既定のロケールを\n                              上書きします。""C"" ロケールは、最も速い照合\n                              シーケンスに従います。現在指定できるロケール\n                              は ""C"" のみです。並べ替えは、常に大文字と小\n                              文字を区別します。\n  /M[EMORY] KB                並べ替えに使うメイン メモリのサイズを KB\n                              で指定します。メモリ サイズは、常に最小\n                              160 KB で制限されます。メモリ サイズが\n                              指定された場合、メイン メモリをどれだけ利用\n                              できるかにかかわらず、指定されたサイズのメモリ\n                              を使用します。\n\n                              通常は、メモリ サイズを指定していないとき、最高\n                              のパフォーマンスを得られます。既定では、並べ替\n                              えが既定の最大メモリ サイズに格納できる場合は、\n                              (一時ファイルを使わないで) 1 回のパスで実行\n                              します。そうでない場合は、(一部の並べ替えられ\n                              たデータを一時ファイルに格納して) 2 回のパス\n                              で実行し、並べ替えと結合パスのためのメモリのサイ\n                              ズを等しくします。入力と出力の両方がファイルの\n                              場合、既定の最大メモリ サイズは利用できるメイン\n                              メモリの 90% になります。そうでない場合は、\n                              メイン メモリの 45% になります。\n  /REC[ORD_MAXIMUM] 文字数    レコードの最大文字数を指定します\n                              (既定値 4096、最大値 65535)。\n  /R[EVERSE]                  並べ替えの順序を降順にします。つまり、Z から A、\n                              9 から 0 の順に並べ替えます。\n  [ドライブ1:][パス1]ファイル名1\n                              並べ替えられるファイルを指定します。指定されて\n                              いない場合、標準入力を並べ替えます。\n                              入力ファイルを指定す方が同じファイルへの標準\n                              入力をリダイレクトするより速くなります。\n  /T[EMPORARY]\n    [ドライブ2:][パス2]\n                              データをメイン メモリに格納できないときのた\n                              めに、並べ替えのための一時記憶域を保持する\n                              ディレクトリを指定します。既定ではシステムの\n                              一時ディレクトリを使用します。\n  /O[UTPUT]\n    [ドライブ3:][パス3]ファイル名3\n                              並べ替えられた入力ファイルが格納されるファイル\n                              を指定します。指定されていない場合、データは\n                              標準出力に書き込まれます。出力ファイルを指定す\n                              る方が同じファイルへの標準出力をリダイレクト\n                              するより早くなります。\n\n
START /// 指定されたプログラムまたはコマンドを実行するためにウィンドウを開きます。\n\nSTART ["タイトル"] [/Dパス] [/I] [/MIN] [/MAX] [/SEPARATE | /SHARED]\n      [/LOW | /NORMAL | /HIGH | /REALTIME | /ABOVENORMAL | /BELOWNORMAL]\n      [/WAIT] [/B] [コマンド/プログラム]\n      [パラメータ]\n\n    "タイトル"  ウィンドウのタイトル バーに表示するタイトル。\n    パス        開始するディレクトリ。\n    B           新しいウィンドウを作成せずにアプリケーションを起動します。\n                アプリケーションは Ctrl+C を無視します。\n                アプリケーションで Ctrl+C を有効にしていない限り、\n                Ctrl+Break がアプリケーションを中断する唯一の方法です。\n    /I          新しい環境は、現在の環境ではなく、cmd.exe に渡された元の環境に\n                なります。\n    /MIN        ウィンドウを最小化の状態で起動します。\n    /MAX        ウィンドウを最大表示の状態で起動します。\n    /SEPARATE   16 ビットの Windows プログラムを別メモリ領域で起動します。\n    /SHARED     16 ビットの Windows プログラムを共有メモリ空間で起動します。\n    /LOW        IDLE 優先度クラスでアプリケーションを起動します。\n    /NORMAL     NORMAL 優先度クラスでアプリケーションを起動します。\n    /HIGH       HIGH 優先度クラスでアプリケーションを起動します。\n    /REALTIME   REALTIME 優先度クラスでアプリケーションを起動します。\n    /ABOVENORMAL\n                ABOVENORMAL 優先度クラスでアプリケーションを起動します。\n    /BELOWNORMAL\n                BELOWNORMAL 優先度クラスでアプリケーションを起動します。\n    /WAIT       アプリケーションを起動し、終了するまで待ちます。\n    コマンド/プログラム\n                内部コマンドまたはバッチ ファイルの場合、コマンド プロセッサ\n                は cmd.exe の /K オプションを使用して実行されます。これは、コ\n                マンドの実行の後でもウィンドウが残ることを意味します。\n                内部コマンドまたはバッチ ファイルではない場合、そのプログラム\n                はウィンドウ モードのアプリケーションまたはコンソール アプリ\n                ケーションとして動作します。\n\n    パラメータ  コマンド/プログラムに渡すパラメータです。\n\n\nコマンド拡張機能を有効にすると、コマンド ラインまたは START コマンドに\nよる外部コマンドの起動は、次のように変更されます:\n\n非実行可能ファイルは、ファイル名をコマンドとして入力することによって、\n    ファイルの関連付けを使って開くことができます (例:  WORD.DOC は .DOC\n    ファイル拡張子に関連付けられているアプリケーションを起動します)。\n    コマンド スクリプト内でファイルの関連付けを作成する方法については、\n    ASSOC と FTYPE コマンドを参照してください。\n\n32 ビット GUI アプリケーションを実行する場合、CMD.EXE は、アプリケー\n    ションの終了を待たずにコマンド プロンプトに戻ります。コマンド スク\n    リプト内で実行する場合は、この動作は発生しません。\n\n最初のトークンが拡張子やパス修飾子を持たない文字列 "CMD" であるコマンド\n    ラインを実行する場合、"CMD" が COMSPEC 変数の値で置き換えられます。\n    これにより現在のディレクトリの CMD.EXE が使われないようにします。\n\n最初のトークンが拡張子を含まないコマンド ラインを実行する場合、CMD.EXE\n    は、PATHEXT 環境変数の値を使って拡張子の種類と順序を判断します。\n    PATHEXT 変数の既定値は、次のとおりです:\n\n        .COM;.EXE;.BAT;.CMD\n\n    この構文は PATH 変数と同じであり、各要素はセミコロンで区切られて\n    いることに注意してください。\n\n実行可能なファイルを検索するときにどの拡張子でも一致するファイルが見つ\nからない場合は、拡張子なしの名前がディレクトリ名と一致するかどうかを調\nべます。一致する場合は、START コマンドがそのパスでエクスプローラを起動\nします。コマンド ラインから実行した場合は、そのパスに対する CD /D の実\n行と同じになります。\n
SUBST /// パスをドライブ名に関連付けます。\n\nSUBST [ドライブ1: [ドライブ2:]パス]\nSUBST ドライブ1: /D\n\n  ドライブ1:        パスを割り当てる仮想ドライブを指定します。\n  [ドライブ2:]パス  仮想ドライブに割り当てる物理ドライブとパスを指定します。\n  /D                置換した (仮想) ドライブを削除します。\n\n現在の仮想ドライブ一覧を表示するときは、パラメータを指定せずに SUBST と入力してください。\n
TIME /// システム時刻を表示または設定します。\n\nTIME [/T | 時刻]\n\nパラメータの指定がなければ、現在の設定が表示され、新しい時刻を入力できる\nプロンプトになります。変更しない場合は、Enter キーを押してください。\n\nコマンド拡張機能を有効にすると、TIME コマンドは、/T スイッチを\nサポートするようになります。このスイッチを指定すると、現在の時刻\nだけが表示され、新しい時刻を入力するためのプロンプトは表示されません。\n
TITLE /// コマンド プロンプト ウィンドウのウィンドウ タイトルを設定します。\n\nTITLE [文字列]\n\n  文字列       コマンド プロンプト ウィンドウのタイトルを指定します。\n
TREE /// ドライブやパスのフォルダー構造を図式表示します。\n\nTREE [ドライブ:][パス] [/F] [/A]\n\n   /F   各フォルダーのファイル名を表示します。\n   /A   拡張文字ではなく、ASCII 文字で表示します。\n\n
TYPE /// テキスト ファイルまたはファイルの内容を表示します。\n\nTYPE  [ドライブ:][パス]ファイル名\n
VER /// Windows 2000 のバージョンを表示します。\n\nVER\n
VERIFY /// ファイルがディスクに正しく書き込まれたことを照合するかどうかを\ncmd.exe に指示します。\n\nVERIFY [ON | OFF]\n\n現在の設定を表示するときは、パラメータを指定せずに VERIFY と入力してください。\n
VOL /// ディスクのボリューム ラベルとシリアル番号を表示します。\n\nVOL [ドライブ:]\n
WSCRIPT /// Windows Script Host\n\n使い方 : WScript scriptname.extension [オプション...] [引数...]\n\nオプション :\n //B            バッチ モード : スクリプトのエラーおよびプロンプトを非表示にする\n\n //D            アクティブ デバッグを使用可能にする\n //E:engine     スクリプト実行時にエンジンを使用する\n //H:CScript    既定のスクリプト ホストを CScript.exe に変更する\n\n //H:WScript    既定のスクリプト ホストを WScript.exe に変更する (既定値)\n //I            対話モード (既定値、//B と逆の動作)\n //Job:xxxx     WSF ジョブを実行する\n //Logo         ロゴを表示する (既定値)\n //Nologo       ロゴを表示しない : 実行時に見出しを表示しない\n //S            このユーザーの現在のコマンド ライン オプションを保存する\n //T:nn         秒単位のタイムアウト時間 :  スクリプトを実行できる時間の最大値\n //X            デバッガでスクリプトを実行する
WZCSETUP /// Usage: wzcsetup /i /u\n/i - to install the WZCSVC component.\n/u - to uninstall WZCSVC.\n
XCOPY /// ファイルとディレクトリ ツリーをコピーします。\n\nXCOPY 送り側 [受け側] [/A | /M] [/D[:日付]] [/P] [/S [/E]] [/V] [/W]\n                      [/C] [/I] [/Q] [/F] [/L] [/H] [/R] [/T] [/U]\n                      [/K] [/N] [/Z]\n                      [/EXCLUDE:ファイル1[+ファイル2][+ファイル3]...]\n\n  送り側      コピーするファイル (複数可) を指定します。\n  受け側      新しいファイルの位置や名前を指定します。\n  /A          アーカイブ属性のファイルのみをコピーし、属性は変更しません。\n  /M          アーカイブ属性のファイルのみをコピーし、アーカイブ属性を解除\n              します。\n  /D:月-日-年 指定された日付以降に変更されたファイルをコピーします。\n              日付が指定されなかったときは、送り側の日付が受け側の日付より\n              新しいファイルだけをコピーします。\n  /EXCLUDE:ファイル1[+ファイル2][+ファイル3]...\n              文字列を含むファイルの一覧を指定します。文字列がコピーされる\n              ファイルの絶対パスの一部と一致した場合、そのファイルはコピー\n              から除外されます。\n  /P          受け側のファイルを作成する前に確認のメッセージを表示します。\n  /S          空の場合を除いて、サブディレクトリをコピーします。\n  /E          サブディレクトリが空であってもコピーします。\n              /S /E と同じ意味です。/T と同時に指定できます。\n  /V          書き込んだ各ファイルを検証します。\n  /W          キー入力があるまでコピー開始を待ちます。\n  /C          エラーが発生してもコピーを続けます。\n  /I          受け側がなく複数のファイルをコピーする場合、受け側をディレク\n              トリとしてコピーします。\n  /Q          コピー中ファイル名を表示しません。\n  /F          コピー中送り側と受け側の全ファイル名を表示します。\n  /L          コピーされるファイル名を表示します。\n  /H          隠しファイルやシステム ファイルもコピーします。\n  /R          読み取り専用ファイルを上書きします。\n  /T          ファイルはコピーせずにディレクトリのみを作成します。ディレク\n              トリまたはサブディレクトリが空の場合は除きます。/E と使用すれ\n              ばディレクトリやサブディレクトリが空でも作成されます。\n  /U          受け側に既に存在するファイルだけをコピーします。\n  /K          属性をコピーします。通常の XCOPY は読み取り専用属性を変更し\n              ます。\n  /N          生成された短い名前を使用してコピーします。\n  /O          ファイルの所有権と ACL 情報をコピーします。\n  /X          ファイル監査設定をコピーします ( /O を含む)。\n  /Y          受け側の既存のファイルを上書きする前に確認のメッセージを表示\n              しません。\n  /-Y         受け側の既存のファイルを上書きする前に確認のメッセージを表示\n              します。\n  /Z          再起動可能モードでネットワーク ファイルをコピーします。\n\n環境変数 COPYCMD にスイッチ /Y を設定できます。\nこれは、コマンド ラインの /-Y で無効になります。\n
